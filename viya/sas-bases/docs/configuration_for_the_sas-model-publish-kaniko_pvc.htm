<html>
    <head>
        <link rel="stylesheet" type="text/css" href="sas.css"/>
        <title>Configuration for the sas-model-publish-kaniko PVC</title>
    </head>
    <body>
        <h1 id="configuration-for-the-sas-model-publish-kaniko-pvc">Configuration for the sas-model-publish-kaniko PVC</h1>
<h2 id="overview">Overview</h2>
<p><a href="https://github.com/GoogleContainerTools/kaniko">Kaniko</a> is a tool to build container images from a Dockerfile without depending on a Docker daemon. The Kaniko container can load the build context from cloud storage or a local directory, and then push the built image to the container registry for a specific destination.</p>
<p>The SAS Model Publish service uses the sas-model-publish-kaniko dedicated PersistentVolume Claim (PVC) as a workspace, which is shared with the Kaniko container. When a user publishes a model to a container destination, sas-model-publish creates a temporary folder (publish-xxxxxxxx) on the volume (/models/kaniko/), which is then mounted from the sas-model-publish-kaniko PVC in the start-up process.</p>
<p>The publishing process generates the following content:</p>
<ul>
<li>Context (Dockerfile and model ZIP file) in the /models/kaniko/publish-xxxxxxxx directory.</li>
<li>AWS configuration in the  /models/kaniko/publish-xxxxxxxx-aws directory, if AWS is the publishing destination type.</li>
<li>Docker configuration in the /models/kaniko/publish-xxxxxxxx-docker directory (Required by all three container destination types).</li>
</ul>
<p><em><strong>Note:</strong> The &ldquo;xxxxxxxx&rdquo; part of the folder names is a system-generated alphanumeric string and is 8 characters in length.</em></p>
<p>The Model Publish service then loads a pod template from the sas-model-publish-kaniko-job-config (as defined in podtemplate.yaml) and dynamically constructs a job specification. The job specification helps mount the directories in the Kaniko container. The default pod template uses the official Kaniko image URL <code>gcr.io/kaniko-project/executor:latest</code>. Users can replace this image URL in the pod template, if the user wants to host the Kaniko image in a different container registry or use a Kaniko debug image.</p>
<p>The Kaniko container is started after a batch job is executed. The Model Publish service checks the job status every 30 seconds. The job times out after 30 minutes, if it has not completed.</p>
<p>The Model Publish service deletes the job and the temporary directories after the job has completed successfully, completed with errors, or has timed out.</p>
<h2 id="files">Files</h2>
<p>In order for the Model Publish service to successfully publish a model to a container destination, the user must prepare and adjust the following files that are located in the <code>$deploy/sas-bases/examples/sas-model-publish</code> directory:</p>
<p><strong>storage.yaml</strong></p>
<pre><code>defines a PVC for the Kaniko workspace.
</code></pre>
<p><strong>podtemplate.yaml</strong></p>
<pre><code>defines a pod template for the batch job that launches the Kaniko container.
</code></pre>
<p>The following file is located in the <code>$deploy/sas-bases/overlays/sas-model-publish/</code> directory and does not need to be modified:</p>
<p><strong>transformers.yaml</strong></p>
<pre><code>adds the sas-model-publish-kaniko PVC to the sas-model-publish deployment object.
</code></pre>
<h2 id="installation">Installation</h2>
<ol>
<li>Copy the files in the <code>$deploy/sas-bases/examples/sas-model-publish</code> directory to the <code>$deploy/site-config/sas-model-publish</code> directory. Create the target directory, if it does not already exist.</li>
<li>Modify the parameters in the podtemplate.yaml file, if you need to implement customized requirements, such as the location of Kaniko image.</li>
<li>Modify the parameters in storage.yaml. For more information about PersistentVolume Claims (PVCs), see <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims">Persistent Volume Claims on Kubernetes</a>.</li>
<li>Replace {{ STORAGE-CAPACITY }} with the amount of storage required.</li>
<li>Replace {{ STORAGE-CLASS-NAME }} with the appropriate storage class from the cloud provider that supports ReadWriteMany access mode.</li>
<li>Make the following changes to the base kustomization.yaml file in the $deploy directory.</li>
<li>Add site-config/sas-model-publish to the resources block.</li>
<li>Add sas-bases/overlays/sas-model-publish/transformers.yaml to the transformers block.</li>
<li>Use the deployment commands described in <a href="http://documentation.sas.com/?softwareId=mysas&amp;softwareVersion=prod&amp;docsetId=dplyml0phy0dkr&amp;docsetTarget=titlepage.htm">SAS Viya Deployment Guide</a> to apply the new settings.</li>
</ol>
    </body>
</html>