---
apiVersion: v1
data:
  README.txt: "JSON templates are stored in this directory, the postgres-operator\nwill read these templates and use them for creating various Kube kinds     \n"
  affinity.json: |2

                "nodeAffinity": {
                "preferredDuringSchedulingIgnoredDuringExecution": [{
                    "weight": 10,
                    "preference": {
                    "matchExpressions": [{
                        "key": "{{.NodeLabelKey}}",
                        "operator": "{{.OperatorValue}}",
                        "values": [
                            "{{.NodeLabelValue}}"
                        ]
                    }]
                    }
                }]
                }
  backrest-job.json: "{\n    \"apiVersion\": \"batch/v1\",\n    \"kind\": \"Job\",\n    \"metadata\": {\n                \"name\": \"{{.JobName}}\",\n                \"labels\": {\n                    \"vendor\": \"crunchydata\",\n                    \"pgo-backrest\": \"true\",\n                    \"pgo-backrest-job\": \"true\",\n                    \"workload.sas.com/class\": \"stateless\",\n                    \"backrest-command\": \"{{.Command}}\",\n                    \"sas.com/pod-security\": \"psp-elevated\",\n                    \"sas.com/deployment\": \"sas-viya\",\n                    \"pg-cluster\": \"{{.ClusterName}}\"\n                }\n    },\n    \"spec\": {\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{.JobName}}\",\n                 \"annotations\": {\n                    \"sidecar.istio.io/inject\": \"false\",\n                    \"sas.com/component-name\": \"sas-crunchy-data-postgres-12\",\n                    \"sas.com/component-version\": \"12.4\",\n                    \"sas.com/version\": \"2020\",\n                    \"sas.com/tls-enabled-ports\": \"all\"\n                 },\n                \"labels\": {\n                    \"vendor\": \"crunchydata\",\n                    \"pgo-backrest\": \"true\",\n                    \"pgo-backrest-job\": \"true\",\n                    \"sas.com/pod-security\": \"psp-elevated\",\n                    \"workload.sas.com/class\": \"stateless\",\n                    \"sas.com/deployment\": \"sas-viya\",\n                    \"backrest-command\": \"{{.Command}}\",\n                    \"pg-cluster\": \"{{.ClusterName}}\"\n                }\n            },\n            \"spec\": {\n                \"volumes\": [\n                    {{.PgbackrestRestoreVolumes}}\n                ],\n                \"securityContext\": {{.SecurityContext}},\n                \"serviceAccountName\": \"pgo-backrest\",\n                \"containers\": [{\n                    \"name\": \"backrest\",\n                    \"image\": \"{{.PGOImagePrefix}}/sas-crunchy-data-pgbackrest-job:CRUNCHY_PGBACKREST_JOB_IMAGE_TAG\",\n                    \"volumeMounts\": [\n                        {{.PgbackrestRestoreVolumeMounts}}\n                    ],\n                    \"env\": [{\n                        \"name\": \"COMMAND\",\n                        \"value\": \"{{.Command}}\"\n                    }, {\n                        \"name\": \"COMMAND_OPTS\",\n                        \"value\": \"{{.CommandOpts}}\"\n                    }, {\n                        \"name\": \"PITR_TARGET\",\n                        \"value\": \"{{.PITRTarget}}\"\n                    }, {\n                        \"name\": \"PODNAME\",\n                        \"value\": \"{{.PodName}}\"\n                    }, {\n                        \"name\": \"PGBACKREST_STANZA\",\n                        \"value\": \"{{.PgbackrestStanza}}\"\n                    }, {\n                        \"name\": \"PGBACKREST_DB_PATH\",\n                        \"value\": \"{{.PgbackrestDBPath}}\"\n                    }, {\n                        \"name\": \"PGBACKREST_REPO_PATH\",\n                        \"value\": \"{{.PgbackrestRepoPath}}\"\n                    }, {\n                        \"name\": \"PGBACKREST_REPO_TYPE\",\n                        \"value\": \"{{.PgbackrestRepoType}}\"\n                    }, {\n                        \"name\": \"PGHA_PGBACKREST_LOCAL_S3_STORAGE\",\n                        \"value\": \"{{.BackrestLocalAndS3Storage}}\"\n                    }, {\n                        \"name\": \"PGBACKREST_LOG_PATH\",\n                        \"value\": \"/tmp\"\n                    }, {\n                        \"name\": \"NAMESPACE\",\n                        \"valueFrom\": {\n                            \"fieldRef\": {\n                                \"fieldPath\": \"metadata.namespace\"\n                            }\n                        }\n                    }]\n                }],\n                \"tolerations\": [\n                   {\n                      \"key\": \"workload.sas.com/class\",\n                      \"operator\": \"Equal\",\n                      \"value\": \"stateful\",\n                      \"effect\": \"NoSchedule\"\n                   },\n                   {\n                      \"key\": \"workload.sas.com/class\",\n                      \"operator\": \"Equal\",\n                      \"value\": \"stateless\",\n                      \"effect\": \"NoSchedule\"\n                   }\n                ],                                \n            \"affinity\": {\n            \"nodeAffinity\": {\n              \"preferredDuringSchedulingIgnoredDuringExecution\": [\n                {\n                  \"weight\": 1,\n                  \"preference\": {\n                    \"matchExpressions\": [\n                      {\n                        \"key\": \"workload.sas.com/class\",\n                        \"operator\": \"In\",\n                        \"values\": [\n                          \"stateful\"\n                        ]\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"weight\": 1,\n                  \"preference\": {\n                    \"matchExpressions\": [\n                      {\n                        \"key\": \"workload.sas.com/class\",\n                        \"operator\": \"NotIn\",\n                        \"values\": [\n                          \"compute\",\n                          \"cas\",\n                          \"stateless\"\n                        ]\n                      }\n                    ]\n                  }\n                }\n              ],\n              \"requiredDuringSchedulingIgnoredDuringExecution\": {\n                 \"nodeSelectorTerms\": [\n                    {\n                       \"matchExpressions\": [\n                          {\n                             \"key\": \"kubernetes.azure.com/mode\",\n                             \"operator\": \"NotIn\",\n                             \"values\": [\n                                \"system\"\n                             ]\n                          }\n                       ]\n                    }\n                 ]\n              }\n            }\n           },\n                \"restartPolicy\": \"Never\"\n            }\n        }\n    }\n}\n"
  backrest-restore-job.json: |
    {
        "apiVersion": "batch/v1",
        "kind": "Job",
        "metadata": {
                    "name": "{{.JobName}}",
                    "labels": {
                        "vendor": "crunchydata",
                        "pgo-backrest-restore": "true",
                        "pg-cluster": "{{.ClusterName}}",
                        "backrest-restore-to-pvc": "{{.ToClusterPVCName}}",
                        "workflowid": "{{.WorkflowID}}"
                    }
        },
        "spec": {
            "backoffLimit": 0,
            "template": {
                "metadata": {
                    "name": "{{.JobName}}",
                     "annotations": {
                        "sidecar.istio.io/inject": "false"
                     },
                    "labels": {
                        "vendor": "crunchydata",
                        "pgo-backrest-restore": "true",
                        "backrest-restore-to-pvc": "{{.ToClusterPVCName}}",
                        "pg-cluster": "{{.ClusterName}}",
                        "service-name": "{{.ClusterName}}"
                    }
                },
                "spec": {
                    "volumes": [ {
                        "name": "pgdata",
                        "persistentVolumeClaim": {
                            "claimName": "{{.ToClusterPVCName}}"
                        }
                    }, {
                        "name": "sshd",
                        "secret": {
                            "secretName": "{{.ClusterName}}-backrest-repo-config",
                            "defaultMode": 511
                        }
                    } ],
                    {{.SecurityContext}}
                    "serviceAccountName": "pgo-backrest",
                    "containers": [{
                        "name": "backrest",
                        "image": "{{.PGOImagePrefix}}/pgo-backrest-restore:{{.PGOImageTag}}",
                        "volumeMounts": [ {
                            "mountPath": "/pgdata",
                            "name": "pgdata",
                            "readOnly": false
                        }, {
                            "mountPath": "/sshd",
                            "name": "sshd",
                            "readOnly": true
                        } ],
                        "env": [{
                {{.PgbackrestS3EnvVars}}
                            "name": "COMMAND_OPTS",
                            "value": "{{.CommandOpts}}"
                        }, {
                            "name": "PITR_TARGET",
                            "value": "{{.PITRTarget}}"
                        }, {
                            "name": "PGBACKREST_STANZA",
                            "value": "{{.PgbackrestStanza}}"
                        }, {
                            "name": "PGBACKREST_DB_PATH",
                            "value": "{{.PgbackrestDBPath}}"
                        }, {
                            "name": "PGBACKREST_REPO1_PATH",
                            "value": "{{.PgbackrestRepo1Path}}"
                        }, {
                            "name": "PGBACKREST_REPO1_HOST",
                            "value": "{{.PgbackrestRepo1Host}}"
                        }, {
                            "name": "PGBACKREST_REPO_TYPE",
                            "value": "{{.PgbackrestRepoType}}"
                        }, {
                            "name": "PGBACKREST_LOG_PATH",
                            "value": "/tmp"
                        }, {
                            "name": "NAMESPACE",
                            "valueFrom": {
                                "fieldRef": {
                                    "fieldPath": "metadata.namespace"
                                }
                            }
                        }]
                    }],
                    "affinity": {
                "nodeAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "weight": 1,
                      "preference": {
                        "matchExpressions": [
                          {
                            "key": "workload.sas.com/class",
                            "operator": "In",
                            "values": [
                              "stateful"
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "weight": 1,
                      "preference": {
                        "matchExpressions": [
                          {
                            "key": "workload.sas.com/class",
                            "operator": "NotIn",
                            "values": [
                              "compute",
                              "cas",
                              "stateless"
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
            {{.NodeSelector}}
                    },
                    "restartPolicy": "Never"
                }
            }
        }
    }
  backup-job.json: |
    {
        "apiVersion": "batch/v1",
        "kind": "Job",
        "metadata": {
            "name": "{{.JobName}}",
            "labels": {
                "vendor": "crunchydata",
                "pgbackup": "true",
                "pg-cluster": "{{.Name}}"
            }
        },
        "spec": {
            "backoffLimit": 0,
            "template": {
                "metadata": {
                    "name": "{{.JobName}}",
                    "labels": {
                        "vendor": "crunchydata",
                        "pgbackup": "true",
                        "pg-cluster": "{{.Name}}"
                    }
                },
                "spec": {
                    "volumes": [{
                        "name": "pgdata",
                        {{.PvcName}}
                    }],
            {{.SecurityContext}}
                    "serviceAccountName": "pgo-default",
                    "containers": [{
                        "name": "backup",
                        "image": "{{.CCPImagePrefix}}/crunchy-backup:{{.CCPImageTag}}",
                        "volumeMounts": [{
                            "mountPath": "/pgdata",
                            "name": "pgdata",
                            "readOnly": false
                        }],
                        {{.ContainerResources }}
                        "env": [{
                            "name": "BACKUP_HOST",
                            "value": "{{.BackupHost}}"
                        }, {
                            "name": "BACKUP_OPTS",
                            "value": "{{.BackupOpts}}"
                        }, {
                            "name": "BACKUP_USER",
                            "valueFrom": {
                                "secretKeyRef": {
                                    "name": "{{.BackupUserSecret}}",
                                    "key": "username"
                                }
                            }
                        }, {
                            "name": "BACKUP_PASS",
                            "valueFrom": {
                                "secretKeyRef": {
                                    "name": "{{.BackupUserSecret}}",
                                    "key": "password"
                                }
                            }
                        }, {
                            "name": "BACKUP_PORT",
                            "value": "{{.BackupPort}}"
                        }]
                    }],
                    "restartPolicy": "Never"
                }
            }
        }
    }
  cluster-deployment.json: "{\n    \"kind\": \"Deployment\",\n    \"apiVersion\": \"apps/v1\",\n    \"metadata\": {\n        \"name\": \"{{.Name}}\",\n        \"labels\": {\n            \"vendor\": \"crunchydata\",\n            \"app.kubernetes.io/name\": \"{{.ClusterName}}\",\n            \"sas.com/deployment\": \"sas-viya\",\n            \"workload.sas.com/class\": \"stateful\",\n            \"sas.com/pod-security\": \"psp-elevated\",\n            \"pgo-pg-database\": \"true\",\n            {{.DeploymentLabels }}\n        },\n        \"annotations\": {\n            \"sas.com/certificate-file-format\": \"pem\",\n            \"sas.com/duname\": \"sas-crunchy-data-postgres-12\",\n            \"sas.com/component-name\": \"sas-crunchy-data-postgres-12\",\n            \"sas.com/component-version\": \"12.4\",\n            \"sas.com/version\": \"2020\",\n            \"sas.com/tls-enabled-ports\": \"all\"\n        }\n    },\n    \"spec\": {\n        \"replicas\": {{.Replicas}},\n        \"selector\": {\n        \"matchLabels\": {\n            \"vendor\": \"crunchydata\",\n            {{.DeploymentLabels }}\n        }\n        },\n        \"template\": {\n            \"metadata\": {\n                \"labels\": {\n                    \"name\": \"{{.Name}}\",\n                    \"vendor\": \"crunchydata\",\n                    \"app.kubernetes.io/name\": \"{{.ClusterName}}\",\n                    \"sas.com/deployment\": \"sas-viya\", \n                    \"workload.sas.com/class\": \"stateful\",\n                    \"sas.com/pod-security\": \"psp-elevated\",\n                    \"pgo-pg-database\": \"true\",\n                    {{.PodLabels }}\n                },\n                \"annotations\": {\n                    \"sas.com/certificate-file-format\": \"pem\",\n                    \"sas.com/duname\": \"sas-crunchy-data-postgres-12\",\n                    \"sas.com/component-name\": \"sas-crunchy-data-postgres-12\",\n                    \"sas.com/component-version\": \"12.4\",\n                    \"sas.com/version\": \"2020\",\n                    \"sas.com/tls-enabled-ports\": \"all\"\n                }\n            },\n            \"spec\": {\n                \"securityContext\": {\n                    \"runAsUser\": 26,\n                    \"runAsGroup\": 26,\n                    \"fsGroup\": 1001\n                },\n                \"serviceAccountName\": \"pgo-pg\",\n                \"containers\": [\n            {\n                    \"name\": \"database\",\n                    \"image\": \"{{.CCPImagePrefix}}/sas-crunchy-data-postgres-12:CRUNCHY_POSTGRES_IMAGE_TAG\",\n                    \"readinessProbe\": {\n                        \"exec\": {\n                            \"command\": [\n                                \"/opt/cpm/bin/health/pgha-readiness.sh\"\n                            ]\n                        },\n                        \"initialDelaySeconds\": 15\n                    },\n                    \"livenessProbe\": {\n                        \"exec\": {\n                            \"command\": [\n                                \"/opt/cpm/bin/health/pgha-liveness.sh\"\n                            ]\n                        },\n                        \"initialDelaySeconds\": 30,\n                        \"periodSeconds\": 15,\n                        \"timeoutSeconds\": 10\n                    },\n\n            {{.ContainerResources }}\n\n                    \"env\": [{\n                        \"name\": \"PGHA_PG_PORT\",\n                        \"value\": \"{{.Port}}\"\n                    }, {\n                        \"name\": \"PGHA_USER\",\n                        \"value\": \"postgres\"\n                    },\n                    {{if .IsInit}}\n                    {\n                        \"name\": \"PGHA_INIT\",\n                        \"valueFrom\": {\n                            \"configMapKeyRef\": {\n                               \"name\": \"{{.ClusterName}}-pgha-config\",\n                               \"key\": \"init\"\n                            }\n                         }\n                    },\n                    {{ end }}\n                    {{if .Tablespaces}}\n                    {\n                       \"name\": \"PGHA_TABLESPACES\",\n                       \"value\": \"{{ .Tablespaces }}\"\n                    },\n                    {{ end }}\n                    {\n                        \"name\": \"PATRONI_POSTGRESQL_DATA_DIR\",\n                        \"value\": \"/pgdata/{{.Name}}\"\n                    },\n                    {{.PgbackrestS3EnvVars}}\n                    {{.PgbackrestEnvVars}}\n                    {{.PgmonitorEnvVars}}\n                    {\n                        \"name\": \"PGHA_DATABASE\",\n                        \"value\": \"{{.Database}}\"\n                    }, {\n                        \"name\": \"PGHA_CRUNCHYADM\",\n                        \"value\": \"true\"\n                    }, {\n                       \"name\": \"PGHA_TLS_ENABLED\",\n                       \"value\": \"{{.TLSEnabled}}\"\n                    }, {\n                       \"name\": \"PGHA_TLS_ONLY\",\n                       \"value\": \"{{.TLSOnly}}\"\n                    }, {\n                        \"name\": \"PGHA_STANDBY\",\n                         \"value\": \"{{.Standby}}\"\n                    }, {\n                        \"name\": \"PGHA_REPLICA_REINIT_ON_START_FAIL\",\n                        \"value\": \"{{.ReplicaReinitOnStartFail}}\"\n                    },  {\n                        \"name\": \"PGHA_SYNC_REPLICATION\",\n                        \"value\": \"{{.SyncReplication}}\"\n                    },  {\n                        \"name\": \"PATRONI_KUBERNETES_NAMESPACE\",\n                        \"valueFrom\": {\n                            \"fieldRef\": {\n                                \"fieldPath\": \"metadata.namespace\"\n                            }\n                        }\n                    },  {\n                        \"name\": \"PATRONI_KUBERNETES_SCOPE_LABEL\",\n                        \"value\": \"{{.ScopeLabel}}\"\n                    },  {\n                        \"name\": \"PATRONI_SCOPE\",\n                        \"valueFrom\": {\n                            \"fieldRef\": {\n                                \"fieldPath\": \"metadata.labels['{{.ScopeLabel}}']\"\n                            }\n                        }\n                    }, {\n                        \"name\": \"PATRONI_KUBERNETES_LABELS\",\n                        \"value\": \"{vendor: \\\"crunchydata\\\"}\"\n                    }, {\n                        \"name\": \"PATRONI_LOG_LEVEL\",\n                        \"value\": \"INFO\"\n                    }, {\n                        \"name\": \"PGHOST\",\n                        \"value\": \"/tmp\"\n                    }],\n                    \"envFrom\": {{.TLSCONFIGMAP}},\n                    \"volumeMounts\": [{\n                            \"mountPath\": \"/pgdata\",\n                            \"name\": \"pgdata\",\n                            \"readOnly\": false\n                        }, {{.TLSVOLUMEMOUNT}} {\n                            \"mountPath\": \"/backrestrepo\",\n                            \"name\": \"backrestrepo\"\n                        }, {\n                            \"mountPath\": \"/pgconf/pguser\",\n                            \"name\": \"user-volume\"\n                        }, {\n                            \"mountPath\": \"/pgconf/pgreplicator\",\n                            \"name\": \"primary-volume\"\n                        }, {\n                            \"mountPath\": \"/pgconf/pgsuper\",\n                            \"name\": \"root-volume\"\n                        }, \n                        {{if .TLSEnabled}}\n                        {\n                            \"mountPath\": \"/pgconf/tls\",\n                            \"name\": \"tls-server\"\n                        },\n                        {{ end }}                                        \n                        {\n                            \"mountPath\": \"/sshd\",\n                            \"name\": \"sshd\",\n                            \"readOnly\": true\n                        }, {\n                            \"mountPath\": \"/pgconf\",\n                            \"name\": \"pgconf-volume\"\n                        }, {\n                            \"mountPath\": \"/recover\",\n                            \"name\": \"recover-volume\"\n                        }, {\n                           \"mountPath\": \"/dev/shm\",\n                           \"name\": \"dshm\"\n                        }, {\n                            \"mountPath\": \"/crunchyadm\",\n                            \"name\": \"crunchyadm\"\n                        }\n                        {{.TablespaceVolumeMounts}}\n                    ],\n\n                    \"ports\": [{\n                        \"containerPort\": 5432,\n                        \"protocol\": \"TCP\"\n                    }, {\n                        \"containerPort\": 8009,\n                        \"protocol\": \"TCP\"\n                    }],\n                    \"resources\": {},\n                    \"imagePullPolicy\": \"Always\"\n                }{{if .EnableCrunchyadm}},\n                {\n                    \"name\": \"crunchyadm\",\n                    \"image\": \"{{.CCPImagePrefix}}/crunchy-admin:{{.CCPImageTag}}\",\n                    \"securityContext\": {\n                        \"runAsUser\": 17\n                    },\n                    \"readinessProbe\": {\n                        \"exec\": {\n                            \"command\": [\n                                \"/opt/cpm/bin/crunchyadm-readiness.sh\"\n                            ]\n                        },\n                        \"initialDelaySeconds\": 30,\n                        \"timeoutSeconds\": 10\n                    },\n                    \"env\": [\n                        {\n                            \"name\": \"PGHOST\",\n                            \"value\": \"/crunchyadm\"\n                        }\n                    ],\n                    \"volumeMounts\": [\n                        {\n                            \"mountPath\": \"/crunchyadm\",\n                            \"name\": \"crunchyadm\"\n                        }\n                    ],\n                    \"imagePullPolicy\": \"Always\"\n                }{{ end }}\n\n                {{.CollectAddon }}\n\n                {{.BadgerAddon }}\n\n                ],\n                \"initContainers\": {{.TLSINITCONTAINER}},\n                \"volumes\": [{\n                        \"name\": \"pgdata\",\n                        {{.PVCName}}\n                    }, {{.TLSVOLUME}} {\n                        \"name\": \"user-volume\",\n                        \"secret\": {\n                            \"secretName\": \"{{.UserSecretName}}\"\n                        }\n                    }, {\n                        \"name\": \"primary-volume\",\n                        \"secret\": {\n                            \"secretName\": \"{{.PrimarySecretName}}\"\n                        }\n                    }, {\n                        \"name\": \"collect-volume\",\n                        {{.CollectVolume}}\n                    }, {\n                        \"name\": \"sshd\",\n                        \"secret\": {\n                            \"secretName\": \"{{.ClusterName}}-backrest-repo-config\",\n                            \"defaultMode\": 511\n                        }\n                    }, {\n                        \"name\": \"root-volume\",\n                        \"secret\": {\n                            \"secretName\": \"{{.RootSecretName}}\"\n                        }\n                    },\n                    {{if .TLSEnabled}}\n                    {\n                      \"name\": \"tls-server\",\n                      \"projected\": {\n                        \"defaultMode\": 288,\n                        \"sources\": [\n                          {\n                            \"secret\": {\n                                \"name\": \"{{.TLSSecret}}\"\n                            }\n                          },\n                          {\n                            \"secret\": {\n                                \"name\": \"{{.CASecret}}\"\n                            }\n                          }\n                        ]\n                      }\n                    },\n                    {{ end }}\n                    {\n                        \"name\": \"recover-volume\",\n                        \"emptyDir\": { \"medium\": \"Memory\" }\n                    }, {\n                        \"name\": \"report\",\n                        \"emptyDir\": { \"medium\": \"Memory\" }\n                    }, {\n                        \"name\": \"backrestrepo\",\n                        \"emptyDir\": { \"medium\": \"Memory\" }\n                    }, {\n                        \"name\": \"crunchyadm\",\n                        \"emptyDir\": {}\n                    }, {\n                        \"name\": \"dshm\",\n                        \"emptyDir\": {\n                          \"medium\": \"Memory\"\n                       }\n                    }, {\n                        \"name\": \"pgconf-volume\",\n                        \"projected\": {\n                            \"sources\": [\n                                {{if .ConfVolume}}\n                                {\n                                    \"configMap\": {\n                                        \"name\": {{.ConfVolume}}\n                                    }\n                                },\n                                {{end}}\n                                {\n                                    \"configMap\": {\n                                        \"name\": \"{{.ClusterName}}-pgha-config\",\n                                        \"optional\": true\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                    {{.TablespaceVolumes}}\n                ],\n                \"tolerations\": [\n                   {\n                      \"key\": \"workload.sas.com/class\",\n                      \"operator\": \"Equal\",\n                      \"value\": \"stateful\",\n                      \"effect\": \"NoSchedule\"\n                   },\n                   {\n                      \"key\": \"workload.sas.com/class\",\n                      \"operator\": \"Equal\",\n                      \"value\": \"stateless\",\n                      \"effect\": \"NoSchedule\"\n                   }\n                ],\n                \"affinity\": {\n            \"nodeAffinity\": {\n              \"preferredDuringSchedulingIgnoredDuringExecution\": [\n                {\n                  \"weight\": 1,\n                  \"preference\": {\n                    \"matchExpressions\": [\n                      {\n                        \"key\": \"workload.sas.com/class\",\n                        \"operator\": \"In\",\n                        \"values\": [\n                          \"stateful\"\n                        ]\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"weight\": 1,\n                  \"preference\": {\n                    \"matchExpressions\": [\n                      {\n                        \"key\": \"workload.sas.com/class\",\n                        \"operator\": \"NotIn\",\n                        \"values\": [\n                          \"compute\",\n                          \"cas\",\n                          \"stateless\"\n                        ]\n                      }\n                    ]\n                  }\n                }\n              ],\n              \"requiredDuringSchedulingIgnoredDuringExecution\": {\n                 \"nodeSelectorTerms\": [\n                    {\n                       \"matchExpressions\": [\n                          {\n                             \"key\": \"kubernetes.azure.com/mode\",\n                             \"operator\": \"NotIn\",\n                             \"values\": [\n                                \"system\"\n                             ]\n                          }\n                       ]\n                    }\n                 ]\n              }\n            }\n        {{.NodeSelector}}\n        {{if and .NodeSelector .PodAntiAffinity}},{{end}}\n        {{.PodAntiAffinity}}\n                },\n                \"restartPolicy\": \"Always\",\n                \"dnsPolicy\": \"ClusterFirst\"\n            }\n        },\n        \"strategy\": {\n            \"type\": \"RollingUpdate\",\n            \"rollingUpdate\": {\n                \"maxUnavailable\": 1,\n                \"maxSurge\": 1\n            }\n        }\n    }\n}\n"
  cluster-service.json: |
    {
        "kind": "Service",
        "apiVersion": "v1",
        "metadata": {
            "name": "{{.Name}}",
            "labels": {
                "vendor": "crunchydata",
                "pg-cluster": "{{.ClusterName}}",
                "app.kubernetes.io/name": "{{.ClusterName}}",
                "name": "{{.Name}}"
            }
        },
        "spec": {
            "ports": [
        {
             "name": "postgres",
                "protocol": "TCP",
                "port": {{.Port}},
                "targetPort": {{.Port}},
                "nodePort": 0
            }, {
        "name": "pgbadger",
        "protocol": "TCP",
        "port": {{.PGBadgerPort}},
        "targetPort": {{.PGBadgerPort}},
        "nodePort": 0
        }, {
        "name": "sshd",
        "protocol": "TCP",
        "port": 2022,
        "targetPort": 2022,
        "nodePort": 0
        }, {
        "name": "postgres-exporter",
        "protocol": "TCP",
        "port": {{.ExporterPort}},
        "targetPort": {{.ExporterPort}},
        "nodePort": 0
        }, {
        "name": "patroni",
        "protocol": "TCP",
        "port": 8009,
        "targetPort": 8009,
        "nodePort": 0
        }
        ],
            "selector": {
                {{ if or (eq .Name .ClusterName) (eq .Name (printf "%s%s" .ClusterName "-replica")) }}
                "pg-cluster": "{{.ClusterName}}",
                {{ if eq .Name (printf "%s%s" .ClusterName "-replica") }}
                "role": "replica"
                {{else}}
                "role": "master"
                {{end}}
                {{else}}
                "service-name": "{{.ServiceName}}"
                {{end}}
            },
            "type": "{{.ServiceType}}",
            "sessionAffinity": "None"
        }
    }
  collect.json: |
    ,{
        "name": "collect",
        "imagePullPolicy": "Always",
        "image": "{{.CCPImagePrefix}}/sas-crunchy-data-collect:CRUNCHY_COLLECT_IMAGE_TAG",
        "ports": [{
            "containerPort": {{.ExporterPort}},
            "protocol": "TCP"
        }],
        "resources": {
            "limits": {
                "cpu": "500m",
                "memory": "500Mi"
            },
            "requests": {
                "cpu": "5m",
                "memory": "90Mi"
            }
        },
        "env": [
            {
                "name": "COLLECT_PG_HOST",
                "value": "127.0.0.1"
            },
            {
                "name": "COLLECT_PG_PORT",
                "value": "{{.PgPort}}"
            },
            {
                "name": "COLLECT_PG_DATABASE",
                "value": "postgres"
            },
            {
                "name": "COLLECT_PG_PARAMS",
                "value": "sslmode=disable"
            },
            {
                "name": "JOB_NAME",
                "value": "{{.JobName}}"
            },{
                "name": "POSTGRES_EXPORTER_PORT",
                "value": "{{.ExporterPort}}"
            }
        ],
        "volumeMounts": [
            {
                "mountPath": "/collect-pguser",
                "name": "collect-volume"
            }
        ]
    }
  container-resources.json: |
    {{ if or .RequestsMemory .RequestsCPU .LimitsMemory .LimitsCPU }}
                        "resources": {
                          {{ if or .LimitsMemory .LimitsCPU }}
                          "limits": {
                            {{ if .LimitsCPU }}
                            "cpu": "{{.LimitsCPU}}"{{ if .LimitsMemory }},{{ end }}
                            {{ end }}
                            {{ if .LimitsMemory }}
                            "memory": "{{.LimitsMemory}}"
                            {{ end }}
                          }{{ if or .RequestsMemory .RequestsCPU }},{{ end }}
                          {{ end }}
                          {{ if or .RequestsMemory .RequestsCPU }}
                          "requests": {
                            {{ if .RequestsCPU }}
                            "cpu": "{{.RequestsCPU}}"{{ if .RequestsMemory }},{{ end }}
                            {{ end }}
                            {{ if .RequestsMemory }}
                            "memory": "{{.RequestsMemory}}"
                            {{ end }}
                          }
                          {{ end }}
                        },
                        {{ end }}
  pgbackrest-env-vars.json: "                        {\"name\": \"PGBACKREST_STANZA\",\n                        \"value\": \"{{.PgbackrestStanza}}\"\n                    }, {\n                        \"name\": \"PGBACKREST_REPO1_HOST\",\n                        \"value\": \"{{.PgbackrestRepo1Host}}\"\n                    }, {\n                        \"name\": \"BACKREST_SKIP_CREATE_STANZA\",\n                        \"value\": \"true\"\n                    }, {\n                        \"name\": \"PGHA_PGBACKREST\",\n                        \"value\": \"true\"\n                    }, {\n                        \"name\": \"PGBACKREST_REPO1_PATH\",\n                        \"value\": \"{{.PgbackrestRepo1Path}}\"\n                    }, {\n                        \"name\": \"PGBACKREST_DB_PATH\",\n                        \"value\": \"{{.PgbackrestDBPath}}\"\n                    }, {\n                        \"name\": \"ENABLE_SSHD\",\n                        \"value\": \"true\"\n                    }, {\n                        \"name\": \"PGBACKREST_LOG_PATH\",\n                        \"value\": \"/tmp\"\n                    }, {\n                        \"name\": \"PGBACKREST_PG1_SOCKET_PATH\",\n                        \"value\": \"/tmp\"\n                    }, {\n                        \"name\": \"PGBACKREST_PG1_PORT\",\n                        \"value\": \"{{.PgbackrestPGPort}}\"\n                    }, {\n                        \"name\": \"PGBACKREST_REPO_TYPE\",\n                        \"value\": \"{{.PgbackrestRepo1Type}}\"\n                    }, {\n                        \"name\": \"PGHA_PGBACKREST_LOCAL_S3_STORAGE\",\n                        \"value\": \"{{.PgbackrestLocalAndS3Storage}}\"\n                    }, \n"
  pgbackrest-s3-env-vars.json: |2-
                        { "name": "PGBACKREST_REPO1_S3_BUCKET",
                        "value": "{{.PgbackrestS3Bucket}}"
                        }, {
                        "name": "PGBACKREST_REPO1_S3_ENDPOINT",
                        "value": "{{.PgbackrestS3Endpoint}}"
                        }, {
                        "name": "PGBACKREST_REPO1_S3_REGION",
                        "value": "{{.PgbackrestS3Region}}"
                        }, {
                        "name": "PGBACKREST_REPO1_S3_KEY",
                        "value": "{{.PgbackrestS3Key}}"
                        }, {
                        "name": "PGBACKREST_REPO1_S3_KEY_SECRET",
                        "value": "{{.PgbackrestS3KeySecret}}"
                        }, {
                        "name": "PGBACKREST_REPO1_S3_CA_FILE",
                        "value": "/sshd/aws-s3-ca.crt"
                        }, {
                        "name": "PGBACKREST_REPO1_HOST_CMD",
                        "value": "/usr/local/bin/archive-push-s3.sh"
                        }, {
  pgbadger.json: |2
                ,{
                    "name": "pgbadger",
                    "image": "{{.CCPImagePrefix}}/sas-crunchy-data-pgbadger:CRUNCHY_PGBADGER_IMAGE_TAG",
                    "imagePullPolicy": "Always",
                    "ports": [ {
                            "containerPort": {{.PGBadgerPort}},
                            "protocol": "TCP"
                        }
                    ],
                    "readinessProbe": {
                        "tcpSocket": {
                            "port": {{.PGBadgerPort}}
                        },
                        "initialDelaySeconds": 20,
                        "periodSeconds": 10
                    },
                    "resources": {
                        "limits": {
                            "cpu": "1000m",
                            "memory": "500Mi"
                         },
                         "requests": {
                             "cpu": "10m",
                             "memory": "90Mi"
                         }
                    },
                    "env": [ {
                        "name": "BADGER_TARGET",
                        "value": "{{.BadgerTarget}}"
                    }, {
                        "name": "PGBADGER_SERVICE_PORT",
                        "value": "{{.PGBadgerPort}}"
                    } ],
                    "volumeMounts": [
                        {
                            "mountPath": "/pgdata",
                            "name": "pgdata",
                            "readOnly": true
                        },
                        {
                            "mountPath": "/report",
                            "name": "report",
                            "readOnly": false
                        }
                    ]
                }
  pgbasebackup-restore-job.json: |-
    {
        "apiVersion":"batch/v1",
        "kind":"Job",
        "metadata":{
            "name":"{{.JobName}}",
            "labels":{
                "vendor":"crunchydata",
                "pgo-pgbasebackup-restore":"true",
                "pgbasebackup-restore-to-pvc": "{{.ToClusterPVCName}}",
                "pg-cluster":"{{.ClusterName}}",
                "pg-task": "{{.TaskName}}",
                "workflowid":"{{.WorkflowID}}"
            }
        },
        "spec":{
            "backoffLimit":0,
            "template":{
                "metadata":{
                    "name":"{{.JobName}}",
                    "labels":{
                        "vendor":"crunchydata",
                        "pgo-pgbasebackup-restore":"true",
                        "pg-cluster":"{{.ClusterName}}",
                        "pg-task": "{{.TaskName}}"
                    }
                },
                "spec":{
                    {{.SecurityContext}}
                    "serviceAccountName": "pgo-default",
                    "containers":[
                        {
                            "name":"pgbasebackup-restore",
                            "image":"{{.CCPImagePrefix}}/crunchy-pgbasebackup-restore:{{.CCPImageTag}}",
                            "env":[
                                {
                                    "name":"BACKUP_PATH",
                                    "value":"{{.BackupPath}}"
                                },
                                {
                                    "name":"PGDATA_PATH",
                                    "value":"{{.PgdataPath}}"
                                }
                            ],
                            "volumeMounts":[
                                {
                                    "mountPath":"/pgdata",
                                    "name":"pgdata"
                                },
                                {
                                    "mountPath":"/backup",
                                    "name":"backup"
                                }
                            ]
                        }
                    ],
                    "volumes":[
                        {
                            "name":"pgdata",
                            "persistentVolumeClaim":{
                                "claimName":"{{.ToClusterPVCName}}"
                            }
                        },
                        {
                            "name":"backup",
                            "persistentVolumeClaim":{
                                "claimName":"{{.BackupPVCName}}"
                            }
                        }
                    ],
            {{.NodeSelector}}
                    "restartPolicy":"Never"
                }
            }
        }
    }
  pgbench-job.json: |
    {
        "apiVersion": "batch/v1",
        "kind": "Job",
        "metadata": {
            "name": "{{.JobName}}",
            "labels": {
                "name": "{{.JobName}}",
                "vendor": "crunchydata",
                "pgo-benchmark": "true",
                "pg-cluster": "{{.ClusterName}}",
                "created": "{{.Created}}",
                "workflowname": "{{.WorkflowName}}"
            }
        },
        "spec": {
            "backoffLimit": 0,
            "template": {
                "metadata": {
                    "name": "{{.JobName}}",
                    "labels": {
                        "vendor": "crunchydata",
                        "pgo-benchmark": "true",
                        "pg-cluster": "{{.ClusterName}}",
                        "created": "{{.Created}}",
                        "workflowname": "{{.WorkflowName}}"
                    }
                },
                "spec": {
                    "serviceAccountName": "pgo-default",
                    "containers": [
                        {
                            "name": "pgbench",
                            "image": "SAS_IMAGE_BENCH_LOCATION/sas-crunchy-data-pgbench:SAS_BENCH_IMAGE_TAG",
                            "env": [
                                {
                                    "name": "PG_DATABASE",
                                    "value": "{{.PGDatabase}}"
                                },
                                {
                                    "name": "PG_HOSTNAME",
                                    "value": "{{.PGHost}}"
                                },
                                {
                                    "name": "PG_PORT",
                                    "value": "{{.PGPort}}"
                                },
                                {
                                    "name": "PG_PASSWORD",
                                    "valueFrom": {
                                        "secretKeyRef": {
                                            "name": "{{.PGUserSecret}}",
                                            "key": "password"
                                        }
                                    }
                                },
                                {
                                    "name": "PG_USERNAME",
                                    "valueFrom": {
                                        "secretKeyRef": {
                                            "name": "{{.PGUserSecret}}",
                                            "key": "username"
                                        }
                                    }
                                },
                                {
                                    "name": "PGBENCH_BENCHMARK_OPTS",
                                    "value": "{{.PGBenchOpts}}"
                                },
                                {
                                    "name": "PGBENCH_INIT_OPTS",
                                    "value": "{{.PGBenchInitOpts}}"
                                },
                                {
                                    "name": "PGBENCH_CLIENTS",
                                    "value": "{{.PGBenchClients}}"
                                },
                                {
                                    "name": "PGBENCH_JOBS",
                                    "value": "{{.PGBenchJobs}}"
                                },
                                {
                                    "name": "PGBENCH_SCALE",
                                    "value": "{{.PGBenchScale}}"
                                },
                                {
                                    "name": "PGBENCH_TRANSACTIONS",
                                    "value": "{{.PGBenchTransactions}}"
                                }
                            ],
                            "volumeMounts": [
                                {
                                    "mountPath": "/pgconf",
                                    "name": "pgconf-volume"
                                }
                            ]
                        }
                    ],
                    "serviceAccountName": "postgres-operator",
                    "volumes": [
                        {
                            "name": "pgconf-volume",
                            {{.PGBenchConfigMap}}
                        }
                    ],
                    "restartPolicy": "Never"
                }
            }
        }
    }
  pgbouncer-template.json: |
    {
        "kind": "Deployment",
        "apiVersion": "apps/v1",
        "metadata": {
            "name": "{{.Name}}",
            "labels": {
                "name": "{{.Name}}",
                "crunchy-pgbouncer": "true",
                "pg-cluster": "{{.ClusterName}}",
                "service-name": "{{.Name}}",
                "vendor": "crunchydata"
            }
        },
        "spec": {
            "replicas": 1,
            "selector": {
                "matchLabels": {
                    "name": "{{.Name}}",
                    "crunchy-pgbouncer": "true",
                    "pg-cluster": "{{.ClusterName}}",
                    "service-name": "{{.Name}}",
                    "vendor": "crunchydata"
                }
            },
            "template": {
                "metadata": {
                    "labels": {
                        "name": "{{.Name}}",
                        "crunchy-pgbouncer": "true",
                        "pg-cluster": "{{.ClusterName}}",
                        "service-name": "{{.Name}}",
                        "vendor": "crunchydata"
                    }
                },
                "spec": {
                    "containers": [{
                        "name": "pgbouncer",
                        "image": "{{.CCPImagePrefix}}/crunchy-pgbouncer:{{.CCPImageTag}}",
                        "ports": [{
                            "containerPort": {{.Port}},
                            "protocol": "TCP"
                        }],
                        {{.ContainerResources }}
                        "env": [{
                            "name": "PG_USERNAME",
                            "valueFrom": {
                                "secretKeyRef": {
                                    "name": "{{.PGBouncerSecret}}",
                                    "key": "username"
                                }
                            }
                        }, {
                            "name": "PG_PASSWORD",
                            "valueFrom": {
                                "secretKeyRef": {
                                    "name": "{{.PGBouncerSecret}}",
                                    "key": "password"
                                }
                            }
                        }, {
                            "name": "PG_PRIMARY_SERVICE_NAME",
                            "value": "{{.PrimaryServiceName}}"
                        }, {
                            "name": "PG_REPLICA_SERVICE_NAME",
                            "value": "{{.ReplicaServiceName}}"
                        }],
                        "volumeMounts": [{
                            "name": "pgbouncer-conf",
                            "mountPath": "/pgconf/",
                            "readOnly": false
                        }]
                    }],
                    "volumes": [{
                    "name": "pgbouncer-conf",
                    "secret": {
                        "secretName": "{{.PGBouncerSecret}}",
                        "defaultMode": 511
                        }
                    }],
                    "restartPolicy": "Always",
                    "dnsPolicy": "ClusterFirst"
                }
            },
            "strategy": {
                "type": "RollingUpdate",
                "rollingUpdate": {
                    "maxUnavailable": 1,
                    "maxSurge": 1
                }
            }
        }
    }
  pgbouncer.ini: |
    [databases]
    {{.PG_PRIMARY_SERVICE_NAME}} = host={{.PG_PRIMARY_SERVICE_NAME}} port={{.PG_PORT}} auth_user={{.PG_USERNAME}} dbname={{.PG_DATABASE}}
    [pgbouncer]
    listen_port = 5432
    listen_addr = *
    auth_type = md5
    auth_file = /pgconf/users.txt
    auth_query = SELECT username, password from pgbouncer.get_auth($1)
    pidfile = /tmp/pgbouncer.pid
    logfile = /dev/stdout
    admin_users = {{.PG_USERNAME}}
    stats_users = {{.PG_USERNAME}}
    default_pool_size = 20
    max_client_conn = 100
    max_db_connections = 0
    min_pool_size = 0
    pool_mode = session
    reserve_pool_size = 0
    reserve_pool_timeout = 5
    query_timeout = 0
    ignore_startup_parameters = extra_float_digits
  pgbouncer_hba.conf: |
    host    all         all         0.0.0.0/0          md5
  pgdump-job.json: |
    {
        "apiVersion": "batch/v1",
        "kind": "Job",
        "metadata": {
            "name": "{{.JobName}}",
            "labels": {
                    "vendor": "crunchydata",
                    "pgdump": "true",
                    "pg-cluster": "{{.ClusterName}}",
                    "pg-task": "{{.TaskName}}"
            }
        },
        "spec": {
            "backoffLimit": 0,
            "template": {
                "metadata": {
                    "name": "{{.JobName}}",
                    "labels": {
                        "vendor":"crunchydata",
                        "pgdump":"true",
                        "pg-cluster":"{{.ClusterName}}"
                    }
                },
                "spec": {
                    "volumes": [
                        {
                            "name": "pgdata",
                            "persistentVolumeClaim": {
                                "claimName": "{{.PgDumpPVC}}"
                            }
                        }
                    ],
                    "securityContext": {{.SecurityContext}},
                    "serviceAccountName": "postgres-operator",
                    "containers": [{
                            "name": "pgdump",
                            "image": "{{.CCPImagePrefix}}/sas-crunchy-data-pgdump:{{.CCPImageTag}}",
                            "volumeMounts": [
                                {
                                    "mountPath": "/pgdata",
                                    "name": "pgdata",
                                    "readOnly": false
                                }
                            ],
                           "resources": {
                               "limits": {
                                   "cpu": "500m",
                                   "memory": "500Mi"
                               },
                               "requests": {
                                   "cpu": "5m",
                                   "memory": "256Mi"
                               }
                           },
                            "env": [
                                {
                                    "name": "PGDUMP_HOST",
                                    "value": "{{.PgDumpHost}}"
                                },
                                {
                                    "name": "PGDUMP_USER",
                                    "valueFrom": {
                                        "secretKeyRef": {
                                            "name": "{{.PgDumpUserSecret}}",
                                            "key": "username"
                                        }
                                    }
                                },
                                {
                                    "name": "PGDUMP_PASS",
                                    "valueFrom": {
                                        "secretKeyRef": {
                                            "name": "{{.PgDumpUserSecret}}",
                                            "key": "password"
                                        }
                                    }
                                },
                                {
                                    "name": "PGDUMP_DB",
                                    "value": "{{.PgDumpDB}}"
                                },
                                {
                                    "name": "PGDUMP_PORT",
                                    "value": "{{.PgDumpPort}}"
                                },
                                {
                                    "name": "PGDUMP_CUSTOM_OPTS",
                                    "value": "{{.PgDumpOpts}}"
                                },
                                {
                                    "name": "PGDUMP_FILENAME",
                                    "value": "{{.PgDumpFilename}}"
                                },
                                {
                                    "name": "PGDUMP_ALL",
                                    "value": "{{.PgDumpAll}}"
                                }
                            ]
                        }
                    ],
                    "restartPolicy": "Never"
                }
            }
        }
    }
  pgmonitor-env-vars.json: "                       { \"name\": \"PGMONITOR_PASSWORD\",\n                        \"value\": \"{{.PgmonitorPassword}}\"\n                    }, \n"
  pgo-backrest-repo-service-template.json: |
    {
            "kind": "Service",
            "apiVersion": "v1",
            "metadata": {
                "name": "{{.Name}}",
                "labels": {
                    "vendor": "crunchydata",
                    "name": "{{.Name}}",
                    "pgo-backrest-repo": "true",
                    "pg-cluster": "{{.ClusterName}}"
                }
            },
            "spec": {
                "ports": [{
                    "protocol": "TCP",
                    "port": {{.Port}},
                    "targetPort": {{.Port}},
                    "nodePort": 0
                }],
                "selector": {
                    "name": "{{.Name}}"
                },
                "type": "ClusterIP",
                "sessionAffinity": "None"
            }
    }
  pgo-backrest-repo-template.json: |
    {
        "kind": "Deployment",
        "apiVersion": "apps/v1",
        "metadata": {
            "name": "{{.Name}}",
            "labels": {
                "name": "{{.Name}}",
                "pg-cluster": "{{.ClusterName}}",
                "service-name": "{{.Name}}",
                "vendor": "crunchydata",
                "workload.sas.com/class": "stateless",
                "sas.com/pod-security": "psp-elevated",
                "sas.com/deployment": "sas-viya",
                "pgo-backrest-repo": "true"
            }
        },
        "spec": {
            "replicas": {{.Replicas}},
            "selector": {
                "matchLabels": {
                        "name": "{{.Name}}",
                        "pg-cluster": "{{.ClusterName}}",
                        "service-name": "{{.Name}}",
                        "vendor": "crunchydata",
                        "{{.PodAntiAffinityLabelName}}": "{{.PodAntiAffinityLabelValue}}",
                        "pgo-backrest-repo": "true"
                }
            },
            "template": {
                "metadata": {
                     "annotations": {
                        "sidecar.istio.io/inject": "false"
                     },
                    "labels": {
                        "name": "{{.Name}}",
                        "pg-cluster": "{{.ClusterName}}",
                        "service-name": "{{.Name}}",
                        "vendor": "crunchydata",
                        "workload.sas.com/class": "stateless",
                        "sas.com/pod-security": "psp-elevated",
                        "sas.com/deployment": "sas-viya",
                        "{{.PodAntiAffinityLabelName}}": "{{.PodAntiAffinityLabelValue}}",
                        "pgo-backrest-repo": "true"
                    }
                },
                "spec": {
                    "securityContext": {{.SecurityContext}},
                    "serviceAccountName": "pgo-default",
                    "containers": [{
                        "name": "database",
                        "image": "{{.PGOImagePrefix}}/sas-crunchy-data-pgbackrest:CRUNCHY_PGBACKREST_IMAGE_TAG",
                        "ports": [{
                            "containerPort": {{.SshdPort}},
                            "protocol": "TCP"
                        }],
                        "resources": {
                            "limits": {
                                "cpu": "500m",
                                "memory": "1Gi"
                            },
                            "requests": {
                                "cpu": "5m",
                                "memory": "500Mi"
                            }
                        },
                        "env": [{
                {{.PgbackrestS3EnvVars}}
                            "name": "PGBACKREST_STANZA",
                            "value": "{{.PgbackrestStanza}}"
                        }, {
                            "name": "SSHD_PORT",
                            "value": "{{.SshdPort}}"
                        }, {
                            "name": "PGBACKREST_DB_PATH",
                            "value": "{{.PgbackrestDBPath}}"
                        }, {
                            "name": "PGBACKREST_REPO_PATH",
                            "value": "{{.PgbackrestRepoPath}}"
                        }, {
                            "name": "PGBACKREST_PG1_PORT",
                            "value": "{{.PgbackrestPGPort}}"
                        }, {
                            "name": "PGBACKREST_LOG_PATH",
                            "value": "/tmp"
                        }, {
                            "name": "PGBACKREST_PG1_SOCKET_PATH",
                            "value": "/tmp"
                        }, {
                            "name": "PGBACKREST_DB_HOST",
                            "value": "{{.PGbackrestDBHost}}"
                        }],
                        "volumeMounts": [{
                            "name": "sshd",
                            "mountPath": "/sshd",
                            "readOnly": true
                        }, {
                            "name": "backrestrepo",
                            "mountPath": "/backrestrepo",
                            "readOnly": false
                        }]
                    }],
                    "volumes": [{
                        "name": "sshd",
                        "secret": {
                            "secretName": "{{.ClusterName}}-backrest-repo-config",
                            "defaultMode": 511
                        }
                    }, {
                        "name": "backrestrepo",
                        "persistentVolumeClaim": {
                            "claimName": "{{.BackrestRepoClaimName}}"
                        }
                    }],
                    "tolerations": [
                       {
                          "key": "workload.sas.com/class",
                          "operator": "Equal",
                          "value": "stateful",
                          "effect": "NoSchedule"
                       },
                       {
                          "key": "workload.sas.com/class",
                          "operator": "Equal",
                          "value": "stateless",
                          "effect": "NoSchedule"
                       }
                    ],
                    "affinity": {
                "nodeAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "weight": 1,
                      "preference": {
                        "matchExpressions": [
                          {
                            "key": "workload.sas.com/class",
                            "operator": "In",
                            "values": [
                              "stateful"
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "weight": 1,
                      "preference": {
                        "matchExpressions": [
                          {
                            "key": "workload.sas.com/class",
                            "operator": "NotIn",
                            "values": [
                              "compute",
                              "cas",
                              "stateless"
                            ]
                          }
                        ]
                      }
                    }
                  ],
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                     "nodeSelectorTerms": [
                        {
                           "matchExpressions": [
                              {
                                 "key": "kubernetes.azure.com/mode",
                                 "operator": "NotIn",
                                 "values": [
                                    "system"
                                 ]
                              }
                           ]
                        }
                     ]
                  }
                }
                {{.PodAntiAffinity}}
                    },
                    "restartPolicy": "Always",
                    "dnsPolicy": "ClusterFirst"
                }
            },
            "strategy": {
                "type": "RollingUpdate",
                "rollingUpdate": {
                    "maxUnavailable": 1,
                    "maxSurge": 1
                }
            }
        }
    }
  pgo-backrest-role-binding.json: |
    {
        "apiVersion": "rbac.authorization.k8s.io/v1",
        "kind": "RoleBinding",
        "metadata": {
            "name": "pgo-backrest-role-binding",
            "namespace": "{{.TargetNamespace}}"
        },
        "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "Role",
            "name": "pgo-backrest-role"
        },
        "subjects": [
            {
                "kind": "ServiceAccount",
                "name": "pgo-backrest",
                "namespace": "{{.TargetNamespace}}"
            }
        ]
    }
  pgo-backrest-role.json: |
    {
        "apiVersion": "rbac.authorization.k8s.io/v1",
        "kind": "Role",
        "metadata": {
            "name": "pgo-backrest-role",
            "namespace": "{{.TargetNamespace}}"
        },
        "rules": [
            {
                "apiGroups": [
                    ""
                ],
                "resources": [
                    "pods"
                ],
                "verbs": [
                    "get",
                    "list"
                ]
            },
            {
                "apiGroups": [
                    ""
                ],
                "resources": [
                    "pods/exec"
                ],
                "verbs": [
                    "create"
                ]
            }
        ]
    }
  pgo-backrest-sa.json: |
    {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
            "name": "pgo-backrest",
            "namespace": "{{.TargetNamespace}}"
        }
    }
  pgo-scc.yaml: |
    allowHostDirVolumePlugin: false
    allowHostIPC: false
    allowHostNetwork: false
    allowHostPID: false
    allowHostPorts: false
    allowPrivilegeEscalation: true
    allowPrivilegedContainer: false
    allowedCapabilities: null
    apiVersion: security.openshift.io/v1
    defaultAddCapabilities: null
    fsGroup:
      type: MustRunAs
      ranges:
      - max: 26
        min: 26
    groups:
    - system:authenticated
    kind: SecurityContextConstraints
    metadata:
      annotations:
        kubernetes.io/description: scc for postgres
      name: pgo
    priority: null
    readOnlyRootFilesystem: false
    requiredDropCapabilities:
    - KILL
    - MKNOD
    - SETUID
    - SETGID
    runAsUser:
      type: MustRunAsRange
    seLinuxContext:
      type: RunAsAny
    supplementalGroups:
      type: RunAsAny
    users: []
    volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - persistentVolumeClaim
    - projected
    - secret
  pgo-target-role-binding.json: |
    {
        "apiVersion": "rbac.authorization.k8s.io/v1",
        "kind": "RoleBinding",
        "metadata": {
            "name": "pgo-target-role-binding",
            "namespace": "{{.TargetNamespace}}"
        },
        "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "Role",
            "name": "pgo-target-role"
        },
        "subjects": [
            {
                "kind": "ServiceAccount",
                "name": "postgres-operator",
                "namespace": "{{.OperatorNamespace}}"
            },
            {
                "kind": "ServiceAccount",
                "name": "pgo-target",
                "namespace": "{{.TargetNamespace}}"
            }
        ]
    }
  pgo-target-role.json: "{\n\n    \"apiVersion\": \"rbac.authorization.k8s.io/v1\",\n    \"kind\": \"Role\",\n    \"metadata\": {\n        \"name\": \"pgo-target-role\",\n        \"namespace\": \"{{.TargetNamespace}}\"\n    },\n    \"rules\": [\n        {\n            \"apiGroups\": [\n                \"crunchydata.com\"\n            ],\n            \"resources\": [\n                \"pgclusters\",\n                \"pgpolicies\",\n                \"pgtasks\",\n                \"pgbackups\",\n                \"pgreplicas\"\n            ],\n            \"verbs\": [\n                \"get\",\n                \"list\",\n                \"watch\",\n                \"create\",\n                \"patch\",\n                \"update\",\n                \"delete\",\n                \"deletecollection\"\n            ]\n        },\n        {\n            \"apiGroups\": [\n                \"apps\"\n            ],\n            \"resources\": [\n                \"deployments\"\n            ],\n            \"verbs\": [\n                \"get\",\n                \"list\",\n                \"watch\",\n                \"create\",\n                \"patch\",\n                \"update\",\n                \"delete\",\n                \"deletecollection\"                                \n            ]\n        },\n        {\n            \"apiGroups\": [\n                \"\"\n            ],\n            \"resources\": [\n                \"secrets\",\n                \"pods\",\n                \"configmaps\",\n                \"pods/exec\",\n                \"pods/log\",\n                \"services\",\n                \"replicasets\",\n                \"endpoints\",\n                \"persistentvolumeclaims\"\n            ],\n            \"verbs\": [\n                \"get\",\n                \"list\",\n                \"watch\",\n                \"create\",\n                \"patch\",\n                \"update\",\n                \"delete\",\n                \"deletecollection\"                                \n            ]\n        },\n        {\n            \"apiGroups\": [\n                \"\"\n            ],\n            \"resources\": [\n                \"nodes\",\n                \"storageclasses\"\n            ],\n            \"verbs\": [\n                \"get\",\n                \"list\"\n            ]\n        },\n        {\n            \"apiGroups\": [\n                \"batch\",\n                \"extensions\"\n            ],\n            \"resources\": [\n                \"jobs\"\n            ],\n            \"verbs\": [\n                \"get\",\n                \"list\",\n                \"watch\",\n                \"create\",\n                \"patch\",\n                \"update\",\n                \"delete\",\n                \"deletecollection\"                                \n            ]\n        },\n        {\n            \"apiGroups\": [\n                \"extensions\"\n            ],\n            \"resources\": [\n                \"deployments\"\n            ],\n            \"verbs\": [\n                \"patch\"\n            ]\n        }\n    ]\n}\n"
  pgo-target-sa.json: |
    {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
            "name": "pgo-target",
            "namespace": "{{.TargetNamespace}}"
        }
    }
  pgo.load-template.json: |
    {
        "apiVersion": "batch/v1",
        "kind": "Job",
        "metadata": {
            "name": "{{.Name}}"
        },
        "spec": {
            "backoffLimit": 0,
            "template": {
                "metadata": {
                    "name": "{{.Name}}",
                    "labels": {
                        "vendor": "crunchydata",
                        "pgo-load": "true",
                        "pg-cluster": "{{.DbHost}}"
                    }
                },
                "spec": {
                    "volumes": [{
                        "name": "pgdata",
                        "persistentVolumeClaim" : {
                            "claimName": "{{.PVCName}}"
                        }
                    }],
            {{.SecurityContext}}
                    "serviceAccountName": "pgo-backrest",
                    "containers": [{
                        "name": "csvload",
                        "image": "{{.PGOImagePrefix}}/pgo-load:{{.PGOImageTag}}",
                        "volumeMounts": [{
                            "mountPath": "/pgdata",
                            "name": "pgdata",
                            "readOnly": true
                        }],
                        {{.ContainerResources }}
                        "env": [{
                            "name": "TABLE_TO_LOAD",
                            "value": "{{.TableToLoad}}"
                        }, {
                            "name": "FILE_PATH",
                            "value": "{{.FilePath}}"
                        }, {
                            "name": "FILE_TYPE",
                            "value": "{{.FileType}}"
                        }, {
                            "name": "DB_HOST",
                            "value": "{{.DbHost}}"
                        }, {
                            "name": "DB_DATABASE",
                            "value": "{{.DbDatabase}}"
                        }, {
                            "name": "DB_USER",
                            "valueFrom": {
                                "secretKeyRef": {
                                    "name": "{{.PGUserSecret}}",
                                    "key": "username"
                                }
                            }
                        }, {
                            "name": "DB_PASS",
                            "valueFrom": {
                                "secretKeyRef": {
                                    "name": "{{.PGUserSecret}}",
                                    "key": "password"
                                }
                            }
                        }, {
                            "name": "DB_PORT",
                            "value": "{{.DbPort}}"
                        }]
                    }],
                    "restartPolicy": "Never"
                }
            }
        }
    }
  pgo.lspvc-template.json: |
    {
        "kind": "Pod",
        "apiVersion": "v1",
        "metadata": {
            "name": "{{.Name}}",
            "labels": {
                "vendor": "crunchydata",
                "name": "lspvc",
                "pg-cluster": "{{.ClusterName}}",
                "pvcname": "{{.PVCName}}"
            }
        },
        "spec": {
            {{.NodeSelector}}
            "restartPolicy": "Never",
            "containers": [{
                "name": "lspvc",
                "securityContext": {
                    "privileged": false
                },
                "image": "{{.PGOImagePrefix}}/pgo-lspvc:{{.PGOImageTag}}",
                {{.ContainerResources }}
                "env": [{
                    "name": "BACKUP_ROOT",
                    "value": "{{.BackupRoot}}"
                }],
                "volumeMounts": [{
                    "mountPath": "/pgdata",
                    "name": "pgdata",
                    "readOnly": true
                }]
            }],
            "volumes": [{
                "name": "pgdata",
                "persistentVolumeClaim": {
                    "claimName": "{{.PVCName}}"
                }
            }]
        }
    }
  pgo.sqlrunner-template.json: |
    {
        "apiVersion": "batch/v1",
        "kind": "Job",
        "metadata": {
            "name": "{{.JobName}}",
            "labels": {
                "vendor": "crunchydata",
                "pgo-sqlrunner": "true",
                "pg-cluster": "{{.ClusterName}}"
            }
        },
        "spec": {
            "backoffLimit": 0,
            "template": {
                "metadata": {
                    "name": "{{.JobName}}",
                    "labels": {
                        "vendor": "crunchydata",
                        "pgo-sqlrunner": "true",
                        "pg-cluster": "{{.ClusterName}}"
                    }
                },
                "spec": {
                    "containers": [
                        {
                            "name": "sqlrunner",
                            "image": "{{.PGOImagePrefix}}/pgo-sqlrunner:{{.PGOImageTag}}",
                            "env": [
                                {
                                    "name": "PG_HOST",
                                    "value": "{{.PGHost}}"
                                },
                                {
                                    "name": "PG_PORT",
                                    "value": "{{.PGPort}}"
                                },
                                {
                                    "name": "PG_DATABASE",
                                    "value": "{{.PGDatabase}}"
                                },
                                {
                                    "name": "PG_USER",
                                    "valueFrom": {
                                        "secretKeyRef": {
                                            "name": "{{.PGUserSecret}}",
                                            "key": "username"
                                        }
                                    }
                                },
                                {
                                    "name": "PG_PASSWORD",
                                    "valueFrom": {
                                        "secretKeyRef": {
                                            "name": "{{.PGUserSecret}}",
                                            "key": "password"
                                        }
                                    }
                                }
                            ],
                            "volumeMounts": [
                                {
                                    "mountPath": "/pgconf",
                                    "name": "pgconf",
                                    "readOnly": true
                                }
                            ]
                        }
                    ],
                    "volumes": [
                        {
                            "name": "pgconf",
                            "configMap": {
                                "name": "{{.PGSQLConfigMap}}"
                            }
                        }
                    ],
                    "restartPolicy": "Never"
                }
            }
        }
    }
  pgo.yaml: |
    Cluster:
      CCPImagePrefix:  PGO_YAML_CCP_IMAGE_PREFIX
      Metrics: true
      Badger: true
      CCPImageTag: latest
      Port:  5432
      PGBadgerPort: 10000
      ExporterPort: 9187
      User:  myuser
      Database:  ""
      PasswordAgeDays:  0
      PasswordLength:  24
      Replicas:  0
      ArchiveMode:  false
      ServiceType:  ClusterIP
      Backrest:  true
      BackrestPort:  2022
      BackrestS3Bucket:
      BackrestS3Endpoint:
      BackrestS3Region:
      DisableAutofail:  false
      PodAntiAffinity: preferred
      PodAntiAffinityPgBackRest: ""
      PodAntiAffinityPgBouncer: ""
      SyncReplication: false
      DefaultInstanceMemory: "128Mi"
      DefaultBackrestMemory:
      DefaultPgBouncerMemory:
      DisableFSGroup: false
    PrimaryStorage: storageos
    WALStorage:
    BackupStorage: storageos
    ReplicaStorage: storageos
    BackrestStorage: storageos
    Storage:
      hostpathstorage:
        AccessMode:  ReadWriteMany
        Size:  1G
        StorageType:  create
      replicastorage:
        AccessMode:  ReadWriteMany
        Size:  700M
        StorageType:  create
      nfsstorage:
        AccessMode:  ReadWriteMany
        Size:  1G
        StorageType:  create
        SupplementalGroups:  65534
      nfsstoragered:
        AccessMode:  ReadWriteMany
        Size:  1G
        MatchLabels: crunchyzone=red
        StorageType:  create
        SupplementalGroups:  65534
      storageos:
        AccessMode:  ReadWriteOnce
        Size:  5Gi
        StorageType:  create
      primarysite:
        AccessMode:  ReadWriteOnce
        Size:  4G
        StorageType:  dynamic
        StorageClass:  primarysite
      alternatesite:
        AccessMode:  ReadWriteOnce
        Size:  4G
        StorageType:  dynamic
        StorageClass:  alternatesite
      gce:
        AccessMode:  ReadWriteOnce
        Size:  300M
        StorageType:  dynamic
        StorageClass:  standard
      rook:
        AccessMode:  ReadWriteOnce
        Size:  1G
        StorageType:  dynamic
        StorageClass:  rook-ceph-block
    Pgo:
      Audit:  false
      PGOImagePrefix:  PGO_YAML_PGO_IMAGE_PREFIX
      PGOImageTag: latest
  pgpool-template.json: |
    {
        "kind": "Deployment",
        "apiVersion": "apps/v1",
        "metadata": {
            "name": "{{.Name}}",
            "labels": {
                "name": "{{.Name}}",
                "pg-cluster": "{{.ClusterName}}",
                "crunchy-pgpool-pod": "true",
                "service-name": "{{.Name}}",
                "vendor": "crunchydata"
            }
        },
        "spec": {
            "replicas": 1,
            "selector": {
                "matchLabels": {
                    "name": "{{.Name}}",
                    "pg-cluster": "{{.ClusterName}}",
                    "crunchy-pgpool-pod": "true",
                    "service-name": "{{.Name}}",
                    "vendor": "crunchydata"
                }
            },
            "template": {
                "metadata": {
                    "labels": {
                        "name": "{{.Name}}",
                        "pg-cluster": "{{.ClusterName}}",
                        "crunchy-pgpool-pod": "true",
                        "service-name": "{{.Name}}",
                        "vendor": "crunchydata"
                    }
                },
                "spec": {
                    "containers": [{
                        "name": "pgpool",
                        "image": "{{.CCPImagePrefix}}/crunchy-pgpool:{{.CCPImageTag}}",
                        "ports": [{
                            "containerPort": {{.Port}},
                            "protocol": "TCP"
                        }],
                        {{.ContainerResources }}
                        "env": [{
                            "name": "PG_USERNAME",
                            "valueFrom": {
                                "secretKeyRef": {
                                    "name": "{{.PGUserSecret}}",
                                    "key": "username"
                                }
                            }
                        }, {
                            "name": "PG_PASSWORD",
                            "valueFrom": {
                                "secretKeyRef": {
                                    "name": "{{.PGUserSecret}}",
                                    "key": "password"
                                }
                            }
                        }, {
                            "name": "PG_PRIMARY_SERVICE_NAME",
                            "value": "{{.PrimaryServiceName}}"
                        }, {
                            "name": "PG_REPLICA_SERVICE_NAME",
                            "value": "{{.ReplicaServiceName}}"
                        }],
                        "volumeMounts": [{
                            "name": "pgpool-conf",
                            "mountPath": "/pgconf/pgpoolconfigdir",
                            "readOnly": false
                        }]
                    }],
                    "volumes": [{
                    "name": "pgpool-conf",
                    "secret": {
                        "secretName": "{{.PGPoolSecret}}",
                        "defaultMode": 511
                        }
                    }],
                    "restartPolicy": "Always",
                    "dnsPolicy": "ClusterFirst"
                }
            },
            "strategy": {
                "type": "RollingUpdate",
                "rollingUpdate": {
                    "maxUnavailable": 1,
                    "maxSurge": 1
                }
            }
        }
    }
  pgpool.conf: |
    # ----------------------------
    # pgPool-II configuration file a custom version
    # ----------------------------
    #
    # This file consists of lines of the form:
    #
    #   name = value
    #
    # Whitespace may be used.  Comments are introduced with "#" anywhere on a line.
    # The complete list of parameter names and allowed values can be found in the
    # pgPool-II documentation.
    #
    # This file is read on server startup and when the server receives a SIGHUP
    # signal.  If you edit the file on a running system, you have to SIGHUP the
    # server for the changes to take effect, or use "pgpool reload".  Some
    # parameters, which are marked below, require a server shutdown and restart to
    # take effect.
    #
    #------------------------------------------------------------------------------
    # CONNECTIONS
    #------------------------------------------------------------------------------
    # - pgpool Connection Settings -
    listen_addresses = '*'
                                       # Host name or IP address to listen on:
                                       # '*' for all, '' for no TCP/IP connections
                                       # (change requires restart)
    #port = 9999
    port = 5432
                                       # Port number
                                       # (change requires restart)
    socket_dir = '/tmp'
                                       # Unix domain socket path
                                       # The Debian package defaults to
                                       # /var/run/postgresql
                                       # (change requires restart)
    # - pgpool Communication Manager Connection Settings -
    pcp_port = 9898
                                       # Port number for pcp
                                       # (change requires restart)
    pcp_socket_dir = '/tmp'
                                       # Unix domain socket path for pcp
                                       # The Debian package defaults to
                                       # /var/run/postgresql
                                       # (change requires restart)
    # - Backend Connection Settings -
    backend_hostname0 = '{{.PG_PRIMARY_SERVICE_NAME}}'
    backend_port0 = 5432
    backend_weight0= 1
    backend_flag0= 'ALLOW_TO_FAILOVER'
    backend_hostname1 = '{{.PG_REPLICA_SERVICE_NAME}}'
    backend_port1 = 5432
    backend_weight1= 1
    backend_flag1= 'ALLOW_TO_FAILOVER'
    #backend_hostname0 = 'master'
                                       # Host name or IP address to connect to for backend 0
    #backend_port0 = 5432
                                       # Port number for backend 0
    #backend_weight0 = 1
                                       # Weight for backend 0 (only in load balancing mode)
    #backend_data_directory0 = '/data'
                                       # Data directory for backend 0
    #backend_flag0 = 'ALLOW_TO_FAILOVER'
                                       # Controls various backend behavior
                                       # ALLOW_TO_FAILOVER or DISALLOW_TO_FAILOVER
    #backend_hostname1 = 'standby'
    #backend_port1 = 5432
    #backend_weight1 = 1
    #backend_data_directory1 = '/data1'
    #backend_flag1 = 'ALLOW_TO_FAILOVER'
    # - Authentication -
    enable_pool_hba = on
                                       # Use pool_hba.conf for client authentication
    pool_passwd = 'pool_passwd'
                                       # File name of pool_passwd for md5 authentication.
                                       # "" disables pool_passwd.
                                       # (change requires restart)
    authentication_timeout = 60
                                       # Delay in seconds to complete client authentication
                                       # 0 means no timeout.
    # - SSL Connections -
    ssl = off
                                       # Enable SSL support
                                       # (change requires restart)
    #ssl_key = './server.key'
                                       # Path to the SSL private key file
                                       # (change requires restart)
    #ssl_cert = './server.cert'
                                       # Path to the SSL public certificate file
                                       # (change requires restart)
    #ssl_ca_cert = ''
                                       # Path to a single PEM format file
                                       # containing CA root certificate(s)
                                       # (change requires restart)
    #ssl_ca_cert_dir = ''
                                       # Directory containing CA root certificate(s)
                                       # (change requires restart)
    #------------------------------------------------------------------------------
    # POOLS
    #------------------------------------------------------------------------------
    # - Pool size -
    num_init_children = 5
                                       # Number of pools
                                       # (change requires restart)
    max_pool = 1
                                       # Number of connections per pool
                                       # (change requires restart)
    # - Life time -
    child_life_time = 300
                                       # Pool exits after being idle for this many seconds
    child_max_connections = 0
                                       # Pool exits after receiving that many connections
                                       # 0 means no exit
    connection_life_time = 0
                                       # Connection to backend closes after being idle for this many seconds
                                       # 0 means no close
    client_idle_limit = 0
                                       # Client is disconnected after being idle for that many seconds
                                       # (even inside an explicit transactions!)
                                       # 0 means no disconnection
    #------------------------------------------------------------------------------
    # LOGS
    #------------------------------------------------------------------------------
    # - Where to log -
    log_destination = 'stderr'
                                       # Where to log
                                       # Valid values are combinations of stderr,
                                       # and syslog. Default to stderr.
    # - What to log -
    print_timestamp = on
                                       # Print timestamp on each line
                                       # (change requires restart)
    log_connections = on
                                       # Log connections
    log_hostname = on
                                       # Hostname will be shown in ps status
                                       # and in logs if connections are logged
    log_statement = on
                                       # Log all statements
    log_per_node_statement = off
                                       # Log all statements
                                       # with node and backend informations
    log_standby_delay = 'if_over_threshold'
                                       # Log standby delay
                                       # Valid values are combinations of always,
                                       # if_over_threshold, none
    # - Syslog specific -
    syslog_facility = 'LOCAL0'
                                       # Syslog local facility. Default to LOCAL0
    syslog_ident = 'pgpool'
                                       # Syslog program identification string
                                       # Default to 'pgpool'
    # - Debug -
    debug_level = 0
                                       # Debug message verbosity level
                                       # 0 means no message, 1 or more mean verbose
    #------------------------------------------------------------------------------
    # FILE LOCATIONS
    #------------------------------------------------------------------------------
    pid_file_name = '/tmp/pgpool.pid'
                                       # PID file name
                                       # (change requires restart)
    logdir = '/tmp'
                                       # Directory of pgPool status file
                                       # (change requires restart)
    #------------------------------------------------------------------------------
    # CONNECTION POOLING
    #------------------------------------------------------------------------------
    connection_cache = off
                                       # Activate connection pools
                                       # (change requires restart)
                                       # Semicolon separated list of queries
                                       # to be issued at the end of a session
                                       # The default is for 8.3 and later
    reset_query_list = 'ABORT; DISCARD ALL'
                                       # The following one is for 8.2 and before
    #reset_query_list = 'ABORT; RESET ALL; SET SESSION AUTHORIZATION DEFAULT'
    #------------------------------------------------------------------------------
    # REPLICATION MODE
    #------------------------------------------------------------------------------
    replication_mode = off
                                       # Activate replication mode
                                       # (change requires restart)
    replicate_select = off
                                       # Replicate SELECT statements
                                       # when in replication or parallel mode
                                       # replicate_select is higher priority than
                                       # load_balance_mode.
    insert_lock = off
                                       # Automatically locks a dummy row or a table
                                       # with INSERT statements to keep SERIAL data
                                       # consistency
                                       # Without SERIAL, no lock will be issued
    lobj_lock_table = ''
                                       # When rewriting lo_creat command in
                                       # replication mode, specify table name to
                                       # lock
    # - Degenerate handling -
    replication_stop_on_mismatch = off
                                       # On disagreement with the packet kind
                                       # sent from backend, degenerate the node
                                       # which is most likely "minority"
                                       # If off, just force to exit this session
    failover_if_affected_tuples_mismatch = off
                                       # On disagreement with the number of affected
                                       # tuples in UPDATE/DELETE queries, then
                                       # degenerate the node which is most likely
                                       # "minority".
                                       # If off, just abort the transaction to
                                       # keep the consistency
    #------------------------------------------------------------------------------
    # LOAD BALANCING MODE
    #------------------------------------------------------------------------------
    load_balance_mode = on
                                       # Activate load balancing mode
                                       # (change requires restart)
    ignore_leading_white_space = on
                                       # Ignore leading white spaces of each query
    white_function_list = ''
                                       # Comma separated list of function names
                                       # that don't write to database
                                       # Regexp are accepted
    black_function_list = 'currval,lastval,nextval,setval'
                                       # Comma separated list of function names
                                       # that write to database
                                       # Regexp are accepted
    #------------------------------------------------------------------------------
    # MASTER/SLAVE MODE
    #------------------------------------------------------------------------------
    master_slave_mode = on
                                       # Activate master/slave mode
                                       # (change requires restart)
    master_slave_sub_mode = 'stream'
                                       # Master/slave sub mode
                                       # Valid values are combinations slony or
                                       # stream. Default is slony.
                                       # (change requires restart)
    # - Streaming -
    sr_check_period = 10
                                       # Streaming replication check period
                                       # Disabled (0) by default
    sr_check_user = '{{.PG_USERNAME}}'
                                       # Streaming replication check user
                                       # This is neccessary even if you disable streaming
                                       # replication delay check by sr_check_period = 0
    sr_check_password = '{{.PG_PASSWORD}}'
                                       # Password for streaming replication check user
    delay_threshold = 10000000
                                       # Threshold before not dispatching query to standby node
                                       # Unit is in bytes
                                       # Disabled (0) by default
    # - Special commands -
    follow_master_command = ''
                                       # Executes this command after master failover
                                       # Special values:
                                       #   %d = node id
                                       #   %h = host name
                                       #   %p = port number
                                       #   %D = database cluster path
                                       #   %m = new master node id
                                       #   %H = hostname of the new master node
                                       #   %M = old master node id
                                       #   %P = old primary node id
                                       #   %r = new master port number
                                       #   %R = new master database cluster path
                                       #   %% = '%' character
    #------------------------------------------------------------------------------
    # PARALLEL MODE
    #------------------------------------------------------------------------------
    parallel_mode = off
                                       # Activates parallel query mode
                                       # (change requires restart)
    pgpool2_hostname = ''
                                       # Set pgpool2 hostname
                                       # (change requires restart)
    # - System DB info -
    #system_db_hostname  = 'localhost'
                                       # (change requires restart)
    #system_db_port = 5432
                                       # (change requires restart)
    #system_db_dbname = 'pgpool'
                                       # (change requires restart)
    #system_db_schema = 'pgpool_catalog'
                                       # (change requires restart)
    #system_db_user = 'pgpool'
                                       # (change requires restart)
    #system_db_password = ''
                                       # (change requires restart)
    #------------------------------------------------------------------------------
    # HEALTH CHECK
    #------------------------------------------------------------------------------
    health_check_period = 20
                                       # Health check period
                                       # Disabled (0) by default
    health_check_timeout = 10
                                       # Health check timeout
                                       # 0 means no timeout
    health_check_user = '{{.PG_USERNAME}}'
                                       # Health check user
    health_check_password = '{{.PG_PASSWORD}}'
                                       # Password for health check user
    health_check_max_retries = 3
    connect_timeout = 10000            # Timeout value in milliseconds before giving up to connect to backend.
                                       # Maximum number of times to retry a failed health check before giving up.
    health_check_retry_delay = 1
                                       # Amount of time to wait (in seconds) between retries.
    #------------------------------------------------------------------------------
    # FAILOVER AND FAILBACK
    #------------------------------------------------------------------------------
    failover_command = ''
                                       # Executes this command at failover
                                       # Special values:
                                       #   %d = node id
                                       #   %h = host name
                                       #   %p = port number
                                       #   %D = database cluster path
                                       #   %m = new master node id
                                       #   %H = hostname of the new master node
                                       #   %M = old master node id
                                       #   %P = old primary node id
                                       #   %r = new master port number
                                       #   %R = new master database cluster path
                                       #   %% = '%' character
    failback_command = ''
                                       # Executes this command at failback.
                                       # Special values:
                                       #   %d = node id
                                       #   %h = host name
                                       #   %p = port number
                                       #   %D = database cluster path
                                       #   %m = new master node id
                                       #   %H = hostname of the new master node
                                       #   %M = old master node id
                                       #   %P = old primary node id
                                       #   %r = new master port number
                                       #   %R = new master database cluster path
                                       #   %% = '%' character
    fail_over_on_backend_error = off
                                       # Initiates failover when reading/writing to the
                                       # backend communication socket fails
                                       # If set to off, pgpool will report an
                                       # error and disconnect the session.
    search_primary_node_timeout = 10
                                       # Timeout in seconds to search for the
                                       # primary node when a failover occurs.
                                       # 0 means no timeout, keep searching
                                       # for a primary node forever.
    #------------------------------------------------------------------------------
    # ONLINE RECOVERY
    #------------------------------------------------------------------------------
    recovery_user = '{{.PG_USERNAME}}'
                                       # Online recovery user
    recovery_password = '{{.PG_PASSWORD}}'
                                       # Online recovery password
    recovery_1st_stage_command = ''
                                       # Executes a command in first stage
    recovery_2nd_stage_command = ''
                                       # Executes a command in second stage
    recovery_timeout = 90
                                       # Timeout in seconds to wait for the
                                       # recovering node's postmaster to start up
                                       # 0 means no wait
    client_idle_limit_in_recovery = 0
                                       # Client is disconnected after being idle
                                       # for that many seconds in the second stage
                                       # of online recovery
                                       # 0 means no disconnection
                                       # -1 means immediate disconnection
    #------------------------------------------------------------------------------
    # WATCHDOG
    #------------------------------------------------------------------------------
    # - Enabling -
    use_watchdog = off
                                        # Activates watchdog
                                        # (change requires restart)
    # -Connection to up stream servers -
    trusted_servers = ''
                                        # trusted server list which are used
                                        # to confirm network connection
                                        # (hostA,hostB,hostC,...)
                                        # (change requires restart)
    ping_path = '/bin'
                                        # ping command path
                                        # (change requires restart)
    # - Watchdog communication Settings -
    wd_hostname = ''
                                        # Host name or IP address of this watchdog
                                        # (change requires restart)
    wd_port = 9000
                                        # port number for watchdog service
                                        # (change requires restart)
    wd_authkey = ''
                                        # Authentication key for watchdog communication
                                        # (change requires restart)
    # - Virtual IP control Setting -
    delegate_IP = ''
                                        # delegate IP address
                                        # If this is empty, virtual IP never bring up.
                                        # (change requires restart)
    ifconfig_path = '/sbin'
                                        # ifconfig command path
                                        # (change requires restart)
    if_up_cmd = 'ifconfig eth0:0 inet $_IP_$ netmask 255.255.255.0'
                                        # startup delegate IP command
                                        # (change requires restart)
    if_down_cmd = 'ifconfig eth0:0 down'
                                        # shutdown delegate IP command
                                        # (change requires restart)
    arping_path = '/usr/sbin'           # arping command path
                                        # (change requires restart)
    arping_cmd = 'arping -U $_IP_$ -w 1'
                                        # arping command
                                        # (change requires restart)
    # - Behaivor on escalation Setting -
    clear_memqcache_on_escalation = on
                                        # Clear all the query cache on shared memory
                                        # when standby pgpool escalate to active pgpool
                                        # (= virtual IP holder).
                                        # This should be off if client connects to pgpool
                                        # not using virtual IP.
                                        # (change requires restart)
    wd_escalation_command = ''
                                        # Executes this command at escalation on new active pgpool.
                                        # (change requires restart)
    # - Lifecheck Setting -
    # -- common --
    wd_lifecheck_method = 'heartbeat'
                                        # Method of watchdog lifecheck ('heartbeat' or 'query')
                                        # (change requires restart)
    wd_interval = 10
                                        # lifecheck interval (sec) > 0
                                        # (change requires restart)
    # -- heartbeat mode --
    wd_heartbeat_port = 9694
                                        # Port number for receiving heartbeat signal
                                        # (change requires restart)
    wd_heartbeat_keepalive = 2
                                        # Interval time of sending heartbeat signal (sec)
                                        # (change requires restart)
    wd_heartbeat_deadtime = 30
                                        # Deadtime interval for heartbeat signal (sec)
                                        # (change requires restart)
    heartbeat_destination0 = 'host0_ip1'
                                        # Host name or IP address of destination 0
                                        # for sending heartbeat signal.
                                        # (change requires restart)
    heartbeat_destination_port0 = 9694
                                        # Port number of destination 0 for sending
                                        # heartbeat signal. Usually this is the
                                        # same as wd_heartbeat_port.
                                        # (change requires restart)
    heartbeat_device0 = ''
                                        # Name of NIC device (such like 'eth0')
                                        # used for sending/receiving heartbeat
                                        # signal to/from destination 0.
                                        # This works only when this is not empty
                                        # and pgpool has root privilege.
                                        # (change requires restart)
    #heartbeat_destination1 = 'host0_ip2'
    #heartbeat_destination_port1 = 9694
    #heartbeat_device1 = ''
    # -- query mode --
    wd_life_point = 3
                                        # lifecheck retry times
                                        # (change requires restart)
    wd_lifecheck_query = 'SELECT 1'
                                        # lifecheck query to pgpool from watchdog
                                        # (change requires restart)
    wd_lifecheck_dbname = 'template1'
                                        # Database name connected for lifecheck
                                        # (change requires restart)
    wd_lifecheck_user = 'nobody'
                                        # watchdog user monitoring pgpools in lifecheck
                                        # (change requires restart)
    wd_lifecheck_password = ''
                                        # Password for watchdog user in lifecheck
                                        # (change requires restart)
    # - Other pgpool Connection Settings -
    #other_pgpool_hostname0 = 'host0'
                                        # Host name or IP address to connect to for other pgpool 0
                                        # (change requires restart)
    #other_pgpool_port0 = 5432
                                        # Port number for othet pgpool 0
                                        # (change requires restart)
    #other_wd_port0 = 9000
                                        # Port number for othet watchdog 0
                                        # (change requires restart)
    #other_pgpool_hostname1 = 'host1'
    #other_pgpool_port1 = 5432
    #other_wd_port1 = 9000
    #------------------------------------------------------------------------------
    # OTHERS
    #------------------------------------------------------------------------------
    relcache_expire = 0
                                       # Life time of relation cache in seconds.
                                       # 0 means no cache expiration(the default).
                                       # The relation cache is used for cache the
                                       # query result against PostgreSQL system
                                       # catalog to obtain various information
                                       # including table structures or if it's a
                                       # temporary table or not. The cache is
                                       # maintained in a pgpool child local memory
                                       # and being kept as long as it survives.
                                       # If someone modify the table by using
                                       # ALTER TABLE or some such, the relcache is
                                       # not consistent anymore.
                                       # For this purpose, cache_expiration
                                       # controls the life time of the cache.
    relcache_size = 256
                                       # Number of relation cache
                                       # entry. If you see frequently:
                                       # "pool_search_relcache: cache replacement happend"
                                       # in the pgpool log, you might want to increate this number.
    check_temp_table = on
                                       # If on, enable temporary table check in SELECT statements.
                                       # This initiates queries against system catalog of primary/master
                                       # thus increases load of master.
                                       # If you are absolutely sure that your system never uses temporary tables
                                       # and you want to save access to primary/master, you could turn this off.
                                       # Default is on.
    #------------------------------------------------------------------------------
    # ON MEMORY QUERY MEMORY CACHE
    #------------------------------------------------------------------------------
    memory_cache_enabled = off
                                       # If on, use the memory cache functionality, off by default
    memqcache_method = 'shmem'
                                       # Cache storage method. either 'shmem'(shared memory) or
                                       # 'memcached'. 'shmem' by default
                                       # (change requires restart)
    memqcache_memcached_host = 'localhost'
                                       # Memcached host name or IP address. Mandatory if
                                       # memqcache_method = 'memcached'.
                                       # Defaults to localhost.
                                       # (change requires restart)
    memqcache_memcached_port = 11211
                                       # Memcached port number. Mondatory if memqcache_method = 'memcached'.
                                       # Defaults to 11211.
                                       # (change requires restart)
    memqcache_total_size = 67108864
                                       # Total memory size in bytes for storing memory cache.
                                       # Mandatory if memqcache_method = 'shmem'.
                                       # Defaults to 64MB.
                                       # (change requires restart)
    memqcache_max_num_cache = 1000000
                                       # Total number of cache entries. Mandatory
                                       # if memqcache_method = 'shmem'.
                                       # Each cache entry consumes 48 bytes on shared memory.
                                       # Defaults to 1,000,000(45.8MB).
                                       # (change requires restart)
    memqcache_expire = 0
                                       # Memory cache entry life time specified in seconds.
                                       # 0 means infinite life time. 0 by default.
                                       # (change requires restart)
    memqcache_auto_cache_invalidation = on
                                       # If on, invalidation of query cache is triggered by corresponding
                                       # DDL/DML/DCL(and memqcache_expire).  If off, it is only triggered
                                       # by memqcache_expire.  on by default.
                                       # (change requires restart)
    memqcache_maxcache = 409600
                                       # Maximum SELECT result size in bytes.
                                       # Must be smaller than memqcache_cache_block_size. Defaults to 400KB.
                                       # (change requires restart)
    memqcache_cache_block_size = 1048576
                                       # Cache block size in bytes. Mandatory if memqcache_method = 'shmem'.
                                       # Defaults to 1MB.
                                       # (change requires restart)
    memqcache_oiddir = '/var/log/pgpool/oiddir'
                                       # Temporary work directory to record table oids
                                       # (change requires restart)
    white_memqcache_table_list = ''
                                       # Comma separated list of table names to memcache
                                       # that don't write to database
                                       # Regexp are accepted
    black_memqcache_table_list = ''
                                       # Comma separated list of table names not to memcache
                                       # that don't write to database
                                       # Regexp are accepted
  pgrestore-job.json: |
    {
        "apiVersion": "batch/v1",
        "kind": "Job",
        "metadata": {
            "name": "{{.JobName}}",
            "labels": {
                "vendor": "crunchydata",
                "pgrestore": "true",
                "pg-cluster": "{{.ClusterName}}",
                "pg-task": "{{.TaskName}}"
            }
        },
        "spec": {
            "template": {
                "metadata": {
                    "name": "{{.JobName}}",
                    "labels": {
                        "vendor": "crunchydata",
                        "pgrestore": "true",
                        "pg-cluster": "{{.ClusterName}}"
                    }
                },
                "spec": {
                    "volumes": [
                        {
                            "name": "pgdata",
                            "persistentVolumeClaim": {
                                "claimName": "{{.FromClusterPVCName}}"
                            }
                        }
                    ],
                    "securityContext": {{.SecurityContext}},
                    "serviceAccountName": "pgo-default",
                    "containers": [
                        {
                            "name": "pgrestore",
                            "image": "{{.CCPImagePrefix}}/sas-crunchy-data-pgrestore:{{.CCPImageTag}}",
                            "volumeMounts": [
                                {
                                    "mountPath": "/pgdata",
                                    "name": "pgdata",
                                    "readOnly": true
                                }
                            ],
                            "env": [
                                {
                                    "name": "PGRESTORE_USER",
                                    "valueFrom": {
                                        "secretKeyRef": {
                                            "name": "{{.PgRestoreUserSecret}}",
                                            "key": "username"
                                        }
                                    }
                                },
                                {
                                    "name": "PGRESTORE_PASS",
                                    "valueFrom": {
                                        "secretKeyRef": {
                                            "name": "{{.PgRestoreUserSecret}}",
                                            "key": "password"
                                        }
                                    }
                                },
                                {
                                    "name": "PGRESTORE_HOST",
                                    "value": "{{.PgRestoreHost}}"
                                },
                                {
                                    "name": "PGRESTORE_DB",
                                    "value": "{{.PgRestoreDB}}"
                                },
                                {
                                    "name": "PG_PRIMARY_PORT",
                                    "value": "5432"
                                },
                                {
                                    "name": "PGRESTORE_CUSTOM_OPTS",
                                    "value": "{{.PGRestoreOpts}}"
                                },
                                {
                                    "name": "PGRESTORE_BACKUP_TIMESTAMP",
                                    "value": "{{.PITRTarget}}"
                                }
                            ]
                        }
                    ],
            {{.NodeSelector}}
                            "restartPolicy": "Never"
                }
            }
        }
    }
  pod-anti-affinity.json: "\n    ,\"podAntiAffinity\": {\n        \"{{.AffinityType}}\": [\n            {\n                {{if eq .AffinityType \"preferredDuringSchedulingIgnoredDuringExecution\"}}                \n                \"weight\": 1,\n                \"podAffinityTerm\": {\n                {{end}}\n                    \"labelSelector\": {\n                        \"matchExpressions\": [\n                            {\n                                \"key\": \"{{.VendorLabelKey}}\",\n                                \"operator\": \"In\",\n                                \"values\": [\n                                    \"{{.VendorLabelValue}}\"\n                                ]\n                            },\n                            {\n                                \"key\": \"{{.PodAntiAffinityLabelKey}}\",\n                                {{if eq .AffinityType \"requiredDuringSchedulingIgnoredDuringExecution\"}}\n                                \"operator\": \"In\",\n                                \"values\": [\n                                    \"required\",\n                                    \"require\"\n                                ]\n                                {{else}}\n                                \"operator\": \"Exists\"\n                                {{end}}\n                            },\n                            {\n                                \"key\": \"pg-cluster\",\n                                \"operator\": \"In\",\n                                \"values\": [\n                                    \"{{.ClusterName}}\"\n                                ]\n                            }\n                        ]\n                    },\n                    \"topologyKey\": \"kubernetes.io/hostname\"\n                {{if eq .AffinityType \"preferredDuringSchedulingIgnoredDuringExecution\"}}     \n                }\n                {{end}}\n            }\n        ]\n    }\n"
  pool_hba.conf: |
    # pgpool Client Authentication Configuration File a custom version
    # ===============================================
    #
    # The format rule in this file follows the rules in the PostgreSQL
    # Administrator's Guide. Refer to chapter "Client Authentication" for a
    # complete description.  A short synopsis follows.
    #
    # This file controls: which hosts are allowed to connect, how clients
    # are authenticated, which user names they can use, which databases they
    # can access.  Records take one of these forms:
    #
    # local      DATABASE  USER  METHOD  [OPTION]
    # host       DATABASE  USER  CIDR-ADDRESS  METHOD  [OPTION]
    #
    # (The uppercase items must be replaced by actual values.)
    #
    # The first field is the connection type: "local" is a Unix-domain
    # socket, "host" is either a plain or SSL-encrypted TCP/IP socket.
    #
    # DATABASE can be "all", "sameuser", a database name, or a comma-separated
    # list thereof. Note that "samegroup" like in PostgreSQL's pg_hba.conf
    # file is not supported, since pgpool does not know which group a user
    # belongs to. Also note that the database specified here may not exist in
    # the backend PostgreSQL. pgpool will authenticate based on the database's
    # name, not based on whether it exists or not.
    #
    # USER can be "all", a user name, or a comma-separated list thereof.  In
    # both the DATABASE and USER fields you can also write a file name prefixed
    # with "@" to include names from a separate file. Note that a group name
    # prefixed with "+" like in PostgreSQL's pg_hba.conf file is not supported
    # because of the same reason as "samegroup" token. Also note that a user
    # name specified here may not exist in the backend PostgreSQL. pgpool will
    # authenticate based on the user's name, not based on whether he/she exists.
    #
    # CIDR-ADDRESS specifies the set of hosts the record matches.
    # It is made up of an IP address and a CIDR mask that is an integer
    # (between 0 and 32 (IPv4) that specifies the number of significant bits in
    # the mask.  Alternatively, you can write an IP address and netmask in
    # separate columns to specify the set of hosts.
    #
    # METHOD can be "trust", "reject", "md5" or "pam".  Note that "pam" sends passwords
    # in clear text.
    #
    # OPTION is the name of the PAM service. Default service name is "pgpool"
    #
    # Database and user names containing spaces, commas, quotes and other special
    # characters must be quoted. Quoting one of the keywords "all" or "sameuser"
    # makes the name lose its special character, and just match a database or
    # username with that name.
    #
    # This file is read on pgpool startup.  If you edit the file on a running
    # system, you have to restart the pgpool  for the changes to take effect.
    # Put your actual configuration here
    # ----------------------------------
    #
    # If you want to allow non-local connections, you need to add more
    # "host" records. In that case you will also need to make pgpool listen
    # on a non-local interface via the listen_addresses configuration parameter.
    #
    # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
    # "local" is for Unix domain socket connections only
    #local   all         all                               trust
    # IPv4 local connections:
    host    all         all         0.0.0.0/0          md5
  pool_passwd: |
    {{range $key, $value := .}}{{.Username}}:{{.Password}}
    {{end}}
  pvc-matchlabels.json: |
    selector": { "matchLabels": { "{{.Key}}": "{{.Value}}" } },
  pvc-storageclass.json: |
    {
        "kind": "PersistentVolumeClaim",
        "apiVersion": "v1",
        "metadata": {
            "name": "{{.Name}}",
            "labels": {
                "vendor": "crunchydata",
                "pgremove": "true",
                "pg-cluster": "{{.ClusterName}}"
            }
        },
        "spec": {
            "accessModes": [
                "{{.AccessMode}}"
            ],
        "storageClassName": "{{.StorageClass}}",
            "resources": {
                "requests": {
                    "storage": "{{.Size}}"
                }
            }
        }
    }
  pvc.json: |
    {
        "kind": "PersistentVolumeClaim",
        "apiVersion": "v1",
        "metadata": {
            "name": "{{.Name}}",
            "labels": {
                "vendor": "crunchydata",
                "pgremove": "true",
                "pg-cluster": "{{.ClusterName}}"
            }
        },
        "spec": {
        {{.MatchLabels}}
            "accessModes": [
                "{{.AccessMode}}"
            ],
            "resources": {
                "requests": {
                    "storage": "{{.Size}}"
                }
            }
        }
    }
  rmdata-job.json: |
    {
        "apiVersion": "batch/v1",
        "kind": "Job",
        "metadata": {
            "name": "{{.JobName}}",
            "labels": {
                "vendor": "crunchydata",
                "pgrmdata": "true",
                "pg-cluster": "{{.ClusterName}}"
            }
        },
        "spec": {
            "template": {
                "metadata": {
                    "annotations": {
                       "sidecar.istio.io/inject": "false"
                    },
                    "name": "{{.JobName}}",
                    "labels": {
                        "vendor": "crunchydata",
                        "pgrmdata": "true",
                        "pg-cluster": "{{.ClusterName}}"
                    }
                },
                "spec": {
                    "serviceAccountName": "pgo-target",
                    "containers": [{
                        "name": "rmdata",
                        "image": "SAS_IMAGE_LOCATION/sas-crunchy-data-delete-postgres-cluster:CRUNCHY_POSTGRES_DELETE_IMAGE_TAG",
                        "resources": {
                               "limits": {
                                   "cpu": "500m",
                                   "memory": "500Mi"
                               },
                               "requests": {
                                   "cpu": "5m",
                                   "memory": "256Mi"
                               }
                        },
                        "env": [{
                            "name": "PG_CLUSTER",
                            "value": "{{.ClusterName}}"
                        }, {
                            "name": "REPLICA_NAME",
                            "value": "{{.ReplicaName}}"
                        }, {
                            "name": "REMOVE_DATA",
                            "value": "{{.RemoveData}}"
                        }, {
                            "name": "REMOVE_BACKUP",
                            "value": "{{.RemoveBackup}}"
                        }, {
                            "name": "IS_BACKUP",
                            "value": "{{.IsBackup}}"
                        }, {
                            "name": "IS_REPLICA",
                            "value": "{{.IsReplica}}"
                        }, {
                            "name": "NAMESPACE",
                            "valueFrom": {
                                "fieldRef": {
                                    "fieldPath": "metadata.namespace"
                                }
                            }
                        }]
                    }],
                    "restartPolicy": "Never"
                }
            }
        }
    }
  users.txt: |
    {{range $key, $value := .}}"{{.Username}}" "{{.Password}}"
    {{end}}
kind: ConfigMap
metadata:
  annotations:
    sas.com/component-name: sas-crunchy-data-postgres-operator
    sas.com/component-version: 20.3.2-20200824.1598301017591
    sas.com/tls-enabled-ports: all
    sas.com/version: 20.3.2
  labels:
    sas.com/admin: cluster-local
    sas.com/deployment: sas-viya
  name: pgo-config
  namespace: viya
